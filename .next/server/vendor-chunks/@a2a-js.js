"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@a2a-js";
exports.ids = ["vendor-chunks/@a2a-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@a2a-js/sdk/dist/chunk-67JNQ6TZ.js":
/*!*********************************************************!*\
  !*** ./node_modules/@a2a-js/sdk/dist/chunk-67JNQ6TZ.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AGENT_CARD_PATH: () => (/* binding */ AGENT_CARD_PATH)\n/* harmony export */ });\n// src/constants.ts\nvar AGENT_CARD_PATH = \".well-known/agent-card.json\";\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGEyYS1qcy9zZGsvZGlzdC9jaHVuay02N0pOUTZUWi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTs7QUFJRSIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aXotZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGEyYS1qcy9zZGsvZGlzdC9jaHVuay02N0pOUTZUWi5qcz9lODdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jb25zdGFudHMudHNcbnZhciBBR0VOVF9DQVJEX1BBVEggPSBcIi53ZWxsLWtub3duL2FnZW50LWNhcmQuanNvblwiO1xuXG5leHBvcnQge1xuICBBR0VOVF9DQVJEX1BBVEhcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@a2a-js/sdk/dist/chunk-67JNQ6TZ.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@a2a-js/sdk/dist/client/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@a2a-js/sdk/dist/client/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A2AClient: () => (/* binding */ A2AClient),\n/* harmony export */   createAuthenticatingFetchWithRetry: () => (/* binding */ createAuthenticatingFetchWithRetry)\n/* harmony export */ });\n/* harmony import */ var _chunk_67JNQ6TZ_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-67JNQ6TZ.js */ \"(ssr)/./node_modules/@a2a-js/sdk/dist/chunk-67JNQ6TZ.js\");\n\n\n// src/client/client.ts\nvar A2AClient = class _A2AClient {\n  agentCardPromise;\n  requestIdCounter = 1;\n  serviceEndpointUrl;\n  // To be populated from AgentCard after fetching\n  customFetchImpl;\n  /**\n   * Constructs an A2AClient instance from an AgentCard.\n   * @param agentCard The AgentCard object.\n   * @param options Optional. The options for the A2AClient including the fetch/auth implementation.\n   */\n  constructor(agentCard, options) {\n    this.customFetchImpl = options?.fetchImpl;\n    if (typeof agentCard === \"string\") {\n      console.warn(\"Warning: Constructing A2AClient with a URL is deprecated. Please use A2AClient.fromCardUrl() instead.\");\n      this.agentCardPromise = this._fetchAndCacheAgentCard(agentCard, options?.agentCardPath);\n    } else {\n      if (!agentCard.url) {\n        throw new Error(\"Provided Agent Card does not contain a valid 'url' for the service endpoint.\");\n      }\n      this.serviceEndpointUrl = agentCard.url;\n      this.agentCardPromise = Promise.resolve(agentCard);\n    }\n  }\n  /**\n   * Dynamically resolves the fetch implementation to use for requests. \n   * Prefers a custom implementation if provided, otherwise falls back to the global fetch.\n   * @returns The fetch implementation.\n   * @param args Arguments to pass to the fetch implementation.\n   * @throws If no fetch implementation is available.\n   */\n  _fetch(...args) {\n    if (this.customFetchImpl) {\n      return this.customFetchImpl(...args);\n    }\n    if (typeof fetch === \"function\") {\n      return fetch(...args);\n    }\n    throw new Error(\n      \"A `fetch` implementation was not provided and is not available in the global scope. Please provide a `fetchImpl` in the A2AClientOptions. For earlier Node.js versions (pre-v18), you can use a library like `node-fetch`.\"\n    );\n  }\n  /**\n   * Creates an A2AClient instance by fetching the AgentCard from a URL then constructing the A2AClient.\n   * @param agentCardUrl The URL of the agent card.\n   * @param options Optional. The options for the A2AClient including the fetch/auth implementation.\n   * @returns A Promise that resolves to a new A2AClient instance.\n   */\n  static async fromCardUrl(agentCardUrl, options) {\n    const fetchImpl = options?.fetchImpl;\n    const requestInit = {\n      headers: { \"Accept\": \"application/json\" }\n    };\n    let response;\n    if (fetchImpl) {\n      response = await fetchImpl(agentCardUrl, requestInit);\n    } else if (typeof fetch === \"function\") {\n      response = await fetch(agentCardUrl, requestInit);\n    } else {\n      throw new Error(\n        \"A `fetch` implementation was not provided and is not available in the global scope. Please provide a `fetchImpl` in the A2AClientOptions. For earlier Node.js versions (pre-v18), you can use a library like `node-fetch`.\"\n      );\n    }\n    if (!response.ok) {\n      throw new Error(`Failed to fetch Agent Card from ${agentCardUrl}: ${response.status} ${response.statusText}`);\n    }\n    let agentCard;\n    try {\n      agentCard = await response.json();\n    } catch (error) {\n      console.error(\"Failed to parse Agent Card JSON:\", error);\n      throw new Error(`Failed to parse Agent Card JSON from ${agentCardUrl}. Original error: ${error.message}`);\n    }\n    return new _A2AClient(agentCard, options);\n  }\n  /**\n   * Helper method to make a generic JSON-RPC POST request.\n   * @param method The RPC method name.\n   * @param params The parameters for the RPC method.\n   * @returns A Promise that resolves to the RPC response.\n   */\n  async _postRpcRequest(method, params) {\n    const endpoint = await this._getServiceEndpoint();\n    const requestId = this.requestIdCounter++;\n    const rpcRequest = {\n      jsonrpc: \"2.0\",\n      method,\n      params,\n      // Cast because TParams structure varies per method\n      id: requestId\n    };\n    const httpResponse = await this._fetchRpc(endpoint, rpcRequest);\n    if (!httpResponse.ok) {\n      let errorBodyText = \"(empty or non-JSON response)\";\n      try {\n        errorBodyText = await httpResponse.text();\n        const errorJson = JSON.parse(errorBodyText);\n        if (errorJson.jsonrpc && errorJson.error) {\n          return errorJson;\n        } else if (!errorJson.jsonrpc && errorJson.error) {\n          throw new Error(`RPC error for ${method}: ${errorJson.error.message} (Code: ${errorJson.error.code}, HTTP Status: ${httpResponse.status}) Data: ${JSON.stringify(errorJson.error.data || {})}`);\n        } else if (!errorJson.jsonrpc) {\n          throw new Error(`HTTP error for ${method}! Status: ${httpResponse.status} ${httpResponse.statusText}. Response: ${errorBodyText}`);\n        }\n      } catch (e) {\n        if (e.message.startsWith(\"RPC error for\") || e.message.startsWith(\"HTTP error for\")) throw e;\n        throw new Error(`HTTP error for ${method}! Status: ${httpResponse.status} ${httpResponse.statusText}. Response: ${errorBodyText}`);\n      }\n    }\n    const rpcResponse = await httpResponse.json();\n    if (rpcResponse.id !== requestId) {\n      console.error(`CRITICAL: RPC response ID mismatch for method ${method}. Expected ${requestId}, got ${rpcResponse.id}. This may lead to incorrect response handling.`);\n    }\n    return rpcResponse;\n  }\n  /**\n   * Internal helper method to fetch the RPC service endpoint.\n   * @param url The URL to fetch.\n   * @param rpcRequest The JSON-RPC request to send.\n   * @param acceptHeader The Accept header to use.  Defaults to \"application/json\".\n   * @returns A Promise that resolves to the fetch HTTP response.\n   */\n  async _fetchRpc(url, rpcRequest, acceptHeader = \"application/json\") {\n    const requestInit = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": acceptHeader\n        // Expect JSON response for non-streaming requests\n      },\n      body: JSON.stringify(rpcRequest)\n    };\n    return this._fetch(url, requestInit);\n  }\n  /**\n   * Sends a message to the agent.\n   * The behavior (blocking/non-blocking) and push notification configuration\n   * are specified within the `params.configuration` object.\n   * Optionally, `params.message.contextId` or `params.message.taskId` can be provided.\n   * @param params The parameters for sending the message, including the message content and configuration.\n   * @returns A Promise resolving to SendMessageResponse, which can be a Message, Task, or an error.\n   */\n  async sendMessage(params) {\n    return this._postRpcRequest(\"message/send\", params);\n  }\n  /**\n   * Sends a message to the agent and streams back responses using Server-Sent Events (SSE).\n   * Push notification configuration can be specified in `params.configuration`.\n   * Optionally, `params.message.contextId` or `params.message.taskId` can be provided.\n   * Requires the agent to support streaming (`capabilities.streaming: true` in AgentCard).\n   * @param params The parameters for sending the message.\n   * @returns An AsyncGenerator yielding A2AStreamEventData (Message, Task, TaskStatusUpdateEvent, or TaskArtifactUpdateEvent).\n   * The generator throws an error if streaming is not supported or if an HTTP/SSE error occurs.\n   */\n  async *sendMessageStream(params) {\n    const agentCard = await this.agentCardPromise;\n    if (!agentCard.capabilities?.streaming) {\n      throw new Error(\"Agent does not support streaming (AgentCard.capabilities.streaming is not true).\");\n    }\n    const endpoint = await this._getServiceEndpoint();\n    const clientRequestId = this.requestIdCounter++;\n    const rpcRequest = {\n      // This is the initial JSON-RPC request to establish the stream\n      jsonrpc: \"2.0\",\n      method: \"message/stream\",\n      params,\n      id: clientRequestId\n    };\n    const response = await this._fetchRpc(endpoint, rpcRequest, \"text/event-stream\");\n    if (!response.ok) {\n      let errorBody = \"\";\n      try {\n        errorBody = await response.text();\n        const errorJson = JSON.parse(errorBody);\n        if (errorJson.error) {\n          throw new Error(`HTTP error establishing stream for message/stream: ${response.status} ${response.statusText}. RPC Error: ${errorJson.error.message} (Code: ${errorJson.error.code})`);\n        }\n      } catch (e) {\n        if (e.message.startsWith(\"HTTP error establishing stream\")) throw e;\n        throw new Error(`HTTP error establishing stream for message/stream: ${response.status} ${response.statusText}. Response: ${errorBody || \"(empty)\"}`);\n      }\n      throw new Error(`HTTP error establishing stream for message/stream: ${response.status} ${response.statusText}`);\n    }\n    if (!response.headers.get(\"Content-Type\")?.startsWith(\"text/event-stream\")) {\n      throw new Error(\"Invalid response Content-Type for SSE stream. Expected 'text/event-stream'.\");\n    }\n    yield* this._parseA2ASseStream(response, clientRequestId);\n  }\n  /**\n   * Sets or updates the push notification configuration for a given task.\n   * Requires the agent to support push notifications (`capabilities.pushNotifications: true` in AgentCard).\n   * @param params Parameters containing the taskId and the TaskPushNotificationConfig.\n   * @returns A Promise resolving to SetTaskPushNotificationConfigResponse.\n   */\n  async setTaskPushNotificationConfig(params) {\n    const agentCard = await this.agentCardPromise;\n    if (!agentCard.capabilities?.pushNotifications) {\n      throw new Error(\"Agent does not support push notifications (AgentCard.capabilities.pushNotifications is not true).\");\n    }\n    return this._postRpcRequest(\n      \"tasks/pushNotificationConfig/set\",\n      params\n    );\n  }\n  /**\n   * Gets the push notification configuration for a given task.\n   * @param params Parameters containing the taskId.\n   * @returns A Promise resolving to GetTaskPushNotificationConfigResponse.\n   */\n  async getTaskPushNotificationConfig(params) {\n    return this._postRpcRequest(\n      \"tasks/pushNotificationConfig/get\",\n      params\n    );\n  }\n  /**\n   * Lists the push notification configurations for a given task.\n   * @param params Parameters containing the taskId.\n   * @returns A Promise resolving to ListTaskPushNotificationConfigResponse.\n   */\n  async listTaskPushNotificationConfig(params) {\n    return this._postRpcRequest(\n      \"tasks/pushNotificationConfig/list\",\n      params\n    );\n  }\n  /**\n   * Deletes the push notification configuration for a given task.\n   * @param params Parameters containing the taskId and push notification configuration ID.\n   * @returns A Promise resolving to DeleteTaskPushNotificationConfigResponse.\n   */\n  async deleteTaskPushNotificationConfig(params) {\n    return this._postRpcRequest(\n      \"tasks/pushNotificationConfig/delete\",\n      params\n    );\n  }\n  /**\n   * Retrieves a task by its ID.\n   * @param params Parameters containing the taskId and optional historyLength.\n   * @returns A Promise resolving to GetTaskResponse, which contains the Task object or an error.\n   */\n  async getTask(params) {\n    return this._postRpcRequest(\"tasks/get\", params);\n  }\n  /**\n   * Cancels a task by its ID.\n   * @param params Parameters containing the taskId.\n   * @returns A Promise resolving to CancelTaskResponse, which contains the updated Task object or an error.\n   */\n  async cancelTask(params) {\n    return this._postRpcRequest(\"tasks/cancel\", params);\n  }\n  /**\n   * @template TExtensionParams The type of parameters for the custom extension method.\n   * @template TExtensionResponse The type of response expected from the custom extension method. \n   * This should extend JSONRPCResponse. This ensures the extension response is still a valid A2A response.\n   * @param method Custom JSON-RPC method defined in the AgentCard's extensions.\n   * @param params Extension paramters defined in the AgentCard's extensions.\n   * @returns A Promise that resolves to the RPC response.\n   */\n  async callExtensionMethod(method, params) {\n    return this._postRpcRequest(method, params);\n  }\n  /**\n   * Resubscribes to a task's event stream using Server-Sent Events (SSE).\n   * This is used if a previous SSE connection for an active task was broken.\n   * Requires the agent to support streaming (`capabilities.streaming: true` in AgentCard).\n   * @param params Parameters containing the taskId.\n   * @returns An AsyncGenerator yielding A2AStreamEventData (Message, Task, TaskStatusUpdateEvent, or TaskArtifactUpdateEvent).\n   */\n  async *resubscribeTask(params) {\n    const agentCard = await this.agentCardPromise;\n    if (!agentCard.capabilities?.streaming) {\n      throw new Error(\"Agent does not support streaming (required for tasks/resubscribe).\");\n    }\n    const endpoint = await this._getServiceEndpoint();\n    const clientRequestId = this.requestIdCounter++;\n    const rpcRequest = {\n      // Initial JSON-RPC request to establish the stream\n      jsonrpc: \"2.0\",\n      method: \"tasks/resubscribe\",\n      params,\n      id: clientRequestId\n    };\n    const response = await this._fetch(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"text/event-stream\"\n      },\n      body: JSON.stringify(rpcRequest)\n    });\n    if (!response.ok) {\n      let errorBody = \"\";\n      try {\n        errorBody = await response.text();\n        const errorJson = JSON.parse(errorBody);\n        if (errorJson.error) {\n          throw new Error(`HTTP error establishing stream for tasks/resubscribe: ${response.status} ${response.statusText}. RPC Error: ${errorJson.error.message} (Code: ${errorJson.error.code})`);\n        }\n      } catch (e) {\n        if (e.message.startsWith(\"HTTP error establishing stream\")) throw e;\n        throw new Error(`HTTP error establishing stream for tasks/resubscribe: ${response.status} ${response.statusText}. Response: ${errorBody || \"(empty)\"}`);\n      }\n      throw new Error(`HTTP error establishing stream for tasks/resubscribe: ${response.status} ${response.statusText}`);\n    }\n    if (!response.headers.get(\"Content-Type\")?.startsWith(\"text/event-stream\")) {\n      throw new Error(\"Invalid response Content-Type for SSE stream on resubscribe. Expected 'text/event-stream'.\");\n    }\n    yield* this._parseA2ASseStream(response, clientRequestId);\n  }\n  /**\n   * Parses an HTTP response body as an A2A Server-Sent Event stream.\n   * Each 'data' field of an SSE event is expected to be a JSON-RPC 2.0 Response object,\n   * specifically a SendStreamingMessageResponse (or similar structure for resubscribe).\n   * @param response The HTTP Response object whose body is the SSE stream.\n   * @param originalRequestId The ID of the client's JSON-RPC request that initiated this stream.\n   * Used to validate the `id` in the streamed JSON-RPC responses.\n   * @returns An AsyncGenerator yielding the `result` field of each valid JSON-RPC success response from the stream.\n   */\n  async *_parseA2ASseStream(response, originalRequestId) {\n    if (!response.body) {\n      throw new Error(\"SSE response body is undefined. Cannot read stream.\");\n    }\n    const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();\n    let buffer = \"\";\n    let eventDataBuffer = \"\";\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          if (eventDataBuffer.trim()) {\n            const result = this._processSseEventData(eventDataBuffer, originalRequestId);\n            yield result;\n          }\n          break;\n        }\n        buffer += value;\n        let lineEndIndex;\n        while ((lineEndIndex = buffer.indexOf(\"\\n\")) >= 0) {\n          const line = buffer.substring(0, lineEndIndex).trim();\n          buffer = buffer.substring(lineEndIndex + 1);\n          if (line === \"\") {\n            if (eventDataBuffer) {\n              const result = this._processSseEventData(eventDataBuffer, originalRequestId);\n              yield result;\n              eventDataBuffer = \"\";\n            }\n          } else if (line.startsWith(\"data:\")) {\n            eventDataBuffer += line.substring(5).trimStart() + \"\\n\";\n          } else if (line.startsWith(\":\")) {\n          } else if (line.includes(\":\")) {\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error reading or parsing SSE stream:\", error.message);\n      throw error;\n    } finally {\n      reader.releaseLock();\n    }\n  }\n  /**\n   * Processes a single SSE event's data string, expecting it to be a JSON-RPC response.\n   * @param jsonData The string content from one or more 'data:' lines of an SSE event.\n   * @param originalRequestId The ID of the client's request that initiated the stream.\n   * @returns The `result` field of the parsed JSON-RPC success response.\n   * @throws Error if data is not valid JSON, not a valid JSON-RPC response, an error response, or ID mismatch.\n   */\n  _processSseEventData(jsonData, originalRequestId) {\n    if (!jsonData.trim()) {\n      throw new Error(\"Attempted to process empty SSE event data.\");\n    }\n    try {\n      const sseJsonRpcResponse = JSON.parse(jsonData.replace(/\\n$/, \"\"));\n      const a2aStreamResponse = sseJsonRpcResponse;\n      if (a2aStreamResponse.id !== originalRequestId) {\n        console.warn(`SSE Event's JSON-RPC response ID mismatch. Client request ID: ${originalRequestId}, event response ID: ${a2aStreamResponse.id}.`);\n      }\n      if (this.isErrorResponse(a2aStreamResponse)) {\n        const err = a2aStreamResponse.error;\n        throw new Error(`SSE event contained an error: ${err.message} (Code: ${err.code}) Data: ${JSON.stringify(err.data || {})}`);\n      }\n      if (!(\"result\" in a2aStreamResponse) || typeof a2aStreamResponse.result === \"undefined\") {\n        throw new Error(`SSE event JSON-RPC response is missing 'result' field. Data: ${jsonData}`);\n      }\n      const successResponse = a2aStreamResponse;\n      return successResponse.result;\n    } catch (e) {\n      if (e.message.startsWith(\"SSE event contained an error\") || e.message.startsWith(\"SSE event JSON-RPC response is missing 'result' field\")) {\n        throw e;\n      }\n      console.error(\"Failed to parse SSE event data string or unexpected JSON-RPC structure:\", jsonData, e);\n      throw new Error(`Failed to parse SSE event data: \"${jsonData.substring(0, 100)}...\". Original error: ${e.message}`);\n    }\n  }\n  isErrorResponse(response) {\n    return \"error\" in response;\n  }\n  ////////////////////////////////////////////////////////////////////////////////\n  // Functions used to support old A2AClient Constructor to be deprecated soon\n  // TODOs:\n  // * remove `agentCardPromise`, and just use agentCard initialized\n  // * _getServiceEndpoint can be made synchronous or deleted and accessed via\n  //   agentCard.url\n  // * getAgentCard changed to this.agentCard\n  // * delete resolveAgentCardUrl(), _fetchAndCacheAgentCard(),\n  //   agentCardPath from A2AClientOptions\n  ////////////////////////////////////////////////////////////////////////////////\n  /**\n   * Fetches the Agent Card from the agent's well-known URI and caches its service endpoint URL.\n   * This method is called by the constructor.\n   * @param agentBaseUrl The base URL of the A2A agent (e.g., https://agent.example.com)\n   * @param agentCardPath path to the agent card, defaults to .well-known/agent-card.json\n   * @returns A Promise that resolves to the AgentCard.\n   */\n  async _fetchAndCacheAgentCard(agentBaseUrl, agentCardPath) {\n    try {\n      const agentCardUrl = this.resolveAgentCardUrl(agentBaseUrl, agentCardPath);\n      const response = await this._fetch(agentCardUrl, {\n        headers: { \"Accept\": \"application/json\" }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch Agent Card from ${agentCardUrl}: ${response.status} ${response.statusText}`);\n      }\n      const agentCard = await response.json();\n      if (!agentCard.url) {\n        throw new Error(\"Fetched Agent Card does not contain a valid 'url' for the service endpoint.\");\n      }\n      this.serviceEndpointUrl = agentCard.url;\n      return agentCard;\n    } catch (error) {\n      console.error(\"Error fetching or parsing Agent Card:\", error);\n      throw error;\n    }\n  }\n  /**\n  * Retrieves the Agent Card.\n  * If an `agentBaseUrl` is provided, it fetches the card from that specific URL.\n  * Otherwise, it returns the card fetched and cached during client construction.\n  * @param agentBaseUrl Optional. The base URL of the agent to fetch the card from.\n  * @param agentCardPath path to the agent card, defaults to .well-known/agent-card.json\n  * If provided, this will fetch a new card, not use the cached one from the constructor's URL.\n  * @returns A Promise that resolves to the AgentCard.\n  */\n  async getAgentCard(agentBaseUrl, agentCardPath) {\n    if (agentBaseUrl) {\n      const agentCardUrl = this.resolveAgentCardUrl(agentBaseUrl, agentCardPath);\n      const response = await this._fetch(agentCardUrl, {\n        headers: { \"Accept\": \"application/json\" }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch Agent Card from ${agentCardUrl}: ${response.status} ${response.statusText}`);\n      }\n      return await response.json();\n    }\n    return this.agentCardPromise;\n  }\n  /**\n   * Determines the agent card URL based on the agent URL.\n   * @param agentBaseUrl The agent URL.\n   * @param agentCardPath Optional relative path to the agent card, defaults to .well-known/agent-card.json\n   */\n  resolveAgentCardUrl(agentBaseUrl, agentCardPath = _chunk_67JNQ6TZ_js__WEBPACK_IMPORTED_MODULE_0__.AGENT_CARD_PATH) {\n    return `${agentBaseUrl.replace(/\\/$/, \"\")}/${agentCardPath.replace(/^\\//, \"\")}`;\n  }\n  /**\n   * Gets the RPC service endpoint URL. Ensures the agent card has been fetched first.\n   * @returns A Promise that resolves to the service endpoint URL string.\n   */\n  async _getServiceEndpoint() {\n    if (this.serviceEndpointUrl) {\n      return this.serviceEndpointUrl;\n    }\n    await this.agentCardPromise;\n    if (!this.serviceEndpointUrl) {\n      throw new Error(\"Agent Card URL for RPC endpoint is not available. Fetching might have failed.\");\n    }\n    return this.serviceEndpointUrl;\n  }\n};\n\n// src/client/auth-handler.ts\nfunction createAuthenticatingFetchWithRetry(fetchImpl, authHandler) {\n  async function authFetch(url, init) {\n    const authHeaders = await authHandler.headers() || {};\n    const mergedInit = {\n      ...init || {},\n      headers: {\n        ...authHeaders,\n        ...init?.headers || {}\n      }\n    };\n    let response = await fetchImpl(url, mergedInit);\n    const updatedHeaders = await authHandler.shouldRetryWithHeaders(mergedInit, response);\n    if (updatedHeaders) {\n      const retryInit = {\n        ...init || {},\n        headers: {\n          ...updatedHeaders,\n          ...init?.headers || {}\n        }\n      };\n      response = await fetchImpl(url, retryInit);\n      if (response.ok && authHandler.onSuccessfulRetry) {\n        await authHandler.onSuccessfulRetry(updatedHeaders);\n      }\n    }\n    return response;\n  }\n  Object.setPrototypeOf(authFetch, Object.getPrototypeOf(fetchImpl));\n  Object.defineProperties(authFetch, Object.getOwnPropertyDescriptors(fetchImpl));\n  return authFetch;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@a2a-js/sdk/dist/client/index.js\n");

/***/ })

};
;