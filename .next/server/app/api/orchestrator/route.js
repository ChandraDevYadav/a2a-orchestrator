"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orchestrator/route";
exports.ids = ["app/api/orchestrator/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_Chan_Dra_Dev_AtoA_Protocol_A2_Quiz_quiz_frontend_src_app_api_orchestrator_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/orchestrator/route.ts */ \"(rsc)/./src/app/api/orchestrator/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orchestrator/route\",\n        pathname: \"/api/orchestrator\",\n        filename: \"route\",\n        bundlePath: \"app/api/orchestrator/route\"\n    },\n    resolvedPagePath: \"D:\\\\Chan Dra Dev\\\\AtoA_Protocol\\\\A2\\\\Quiz\\\\quiz-frontend\\\\src\\\\app\\\\api\\\\orchestrator\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Chan_Dra_Dev_AtoA_Protocol_A2_Quiz_quiz_frontend_src_app_api_orchestrator_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/orchestrator/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZvcmNoZXN0cmF0b3IlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm9yY2hlc3RyYXRvciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm9yY2hlc3RyYXRvciUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDQ2hhbiUyMERyYSUyMERldiU1Q0F0b0FfUHJvdG9jb2wlNUNBMiU1Q1F1aXolNUNxdWl6LWZyb250ZW5kJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1EJTNBJTVDQ2hhbiUyMERyYSUyMERldiU1Q0F0b0FfUHJvdG9jb2wlNUNBMiU1Q1F1aXolNUNxdWl6LWZyb250ZW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMrQztBQUM1SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aXotZnJvbnRlbmQvP2FhZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcQ2hhbiBEcmEgRGV2XFxcXEF0b0FfUHJvdG9jb2xcXFxcQTJcXFxcUXVpelxcXFxxdWl6LWZyb250ZW5kXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG9yY2hlc3RyYXRvclxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvb3JjaGVzdHJhdG9yL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb3JjaGVzdHJhdG9yXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vcmNoZXN0cmF0b3Ivcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxDaGFuIERyYSBEZXZcXFxcQXRvQV9Qcm90b2NvbFxcXFxBMlxcXFxRdWl6XFxcXHF1aXotZnJvbnRlbmRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcb3JjaGVzdHJhdG9yXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9vcmNoZXN0cmF0b3Ivcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/orchestrator/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/orchestrator/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_orchestratorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/orchestratorService */ \"(rsc)/./src/lib/orchestratorService.ts\");\n\n\n// Global orchestrator service instance\nlet orchestratorService;\n// Initialize orchestrator service\nif (!orchestratorService) {\n    orchestratorService = new _lib_orchestratorService__WEBPACK_IMPORTED_MODULE_1__.NextJSOrchestratorService();\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, ...data } = body;\n        let result;\n        switch(action){\n            case \"discover_agents\":\n                result = await orchestratorService.discoverAgents(data);\n                break;\n            case \"orchestrate_quiz_workflow\":\n                result = await orchestratorService.orchestrateQuizWorkflow(data);\n                break;\n            case \"monitor_system_health\":\n                result = await orchestratorService.monitorSystemHealth(data);\n                break;\n            case \"get_chat_history\":\n                result = orchestratorService.getChatHistory();\n                break;\n            case \"get_workflow_chat_history\":\n                result = orchestratorService.getWorkflowChatHistory(data.workflowId);\n                break;\n            case \"clear_chat_history\":\n                orchestratorService.clearChatHistory();\n                result = {\n                    success: true\n                };\n                break;\n            case \"get_workflows\":\n                result = orchestratorService.getAllWorkflows();\n                break;\n            case \"get_workflow\":\n                result = orchestratorService.getWorkflow(data.workflowId);\n                break;\n            case \"get_agents\":\n                result = orchestratorService.getAllAgents();\n                break;\n            case \"get_agent\":\n                result = orchestratorService.getAgent(data.url);\n                break;\n            case \"determine_agent_for_query\":\n                result = orchestratorService.determineAgentForQuery(data.query);\n                break;\n            case \"handle_general_mcp_query\":\n                result = await orchestratorService.handleGeneralMCPQuery(data);\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Unknown action: ${action}`\n                }, {\n                    status: 400\n                });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Orchestrator API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const action = searchParams.get(\"action\");\n        let result;\n        switch(action){\n            case \"health\":\n                result = {\n                    status: \"ok\",\n                    service: \"nextjs-orchestrator\"\n                };\n                break;\n            case \"status\":\n                result = {\n                    orchestrator: {\n                        status: \"running\",\n                        uptime: process.uptime(),\n                        memory: process.memoryUsage(),\n                        version: \"1.0.0\"\n                    },\n                    agents: {\n                        discovered: orchestratorService.getAllAgents().length,\n                        active: orchestratorService.getAllAgents().filter((a)=>a.status === \"online\").length,\n                        last_discovery: new Date().toISOString()\n                    }\n                };\n                break;\n            case \"chat_history\":\n                result = orchestratorService.getChatHistory();\n                break;\n            case \"workflows\":\n                result = orchestratorService.getAllWorkflows();\n                break;\n            case \"agents\":\n                result = orchestratorService.getAllAgents();\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Unknown action: ${action}`\n                }, {\n                    status: 400\n                });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Orchestrator GET API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orchestrator/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/orchestratorService.ts":
/*!****************************************!*\
  !*** ./src/lib/orchestratorService.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextJSOrchestratorService: () => (/* binding */ NextJSOrchestratorService)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n\nclass NextJSOrchestratorService {\n    constructor(){\n        this.agents = new Map();\n        this.workflows = new Map();\n        this.chatHistory = [];\n        this.knownAgentUrls = [\n            \"http://localhost:3000\",\n            \"http://localhost:4001\"\n        ];\n        this.startAgentDiscovery();\n        this.initializeVirtualAgents();\n    }\n    /**\r\n   * Initialize virtual MCP agents that don't have physical endpoints\r\n   */ initializeVirtualAgents() {\n        // Add the normal MCP agent as a virtual agent\n        const normalMCPAgent = {\n            name: \"General MCP Agent\",\n            url: \"virtual://normal-mcp-agent\",\n            skills: [\n                \"general-conversation\",\n                \"information-retrieval\",\n                \"task-assistance\"\n            ],\n            status: \"online\",\n            lastSeen: new Date(),\n            capabilities: {\n                description: \"Handles general queries, conversations, and non-quiz related tasks\",\n                type: \"virtual\"\n            }\n        };\n        this.agents.set(\"virtual://normal-mcp-agent\", normalMCPAgent);\n    }\n    /**\r\n   * Determine which agent should handle a query based on content analysis\r\n   */ determineAgentForQuery(query) {\n        const lowerQuery = query.toLowerCase();\n        // Quiz-related queries go to backend agent\n        if (lowerQuery.includes(\"quiz\") || lowerQuery.includes(\"question\") || lowerQuery.includes(\"test\") || lowerQuery.includes(\"exam\") || lowerQuery.includes(\"assessment\") || lowerQuery.includes(\"multiple choice\")) {\n            return this.agents.get(\"http://localhost:4001\") || null;\n        }\n        // Workflow/orchestration queries go to frontend agent\n        if (lowerQuery.includes(\"workflow\") || lowerQuery.includes(\"orchestrate\") || lowerQuery.includes(\"coordinate\") || lowerQuery.includes(\"manage\")) {\n            return this.agents.get(\"http://localhost:3000\") || null;\n        }\n        // All other queries go to normal MCP agent\n        return this.agents.get(\"virtual://normal-mcp-agent\") || null;\n    }\n    /**\r\n   * Handle general MCP queries that don't require specific agent routing\r\n   */ async handleGeneralMCPQuery(requestData) {\n        const { query, context } = requestData;\n        const chatMode = context?.chatMode || \"quiz\"; // Default to quiz mode\n        // Add query to chat history\n        this.addChatMessage({\n            type: \"user\",\n            content: query,\n            metadata: {\n                status: \"processing\"\n            }\n        });\n        let response = \"\";\n        let agentId = \"\";\n        if (chatMode === \"quiz\" || query.toLowerCase().includes(\"quiz\") || query.toLowerCase().includes(\"question\")) {\n            // Quiz-focused responses\n            agentId = \"quiz-agent\";\n            if (query.toLowerCase().includes(\"create quiz\")) {\n                response = `Great! I'd love to help you create a quiz. What topic would you like the quiz to cover? \r\n\r\n**Examples you can try:**\r\n• \"Create a quiz about the solar system\"\r\n• \"Make a science quiz about photosynthesis\" \r\n• \"Generate a history quiz about the Renaissance\"\r\n• \"Create a math quiz about algebra\"\r\n• \"Make a quiz about JavaScript programming\"\r\n\r\nJust tell me the topic and I'll create 20 multiple-choice questions for you!`;\n            } else if (query.toLowerCase().includes(\"science\")) {\n                response = `Perfect! I can create science quizzes on any topic. Here are some examples:\r\n\r\n**Science Quiz Topics:**\r\n• \"Create a quiz about the solar system and planets\"\r\n• \"Make a biology quiz about human anatomy\"\r\n• \"Generate a chemistry quiz about periodic table\"\r\n• \"Create a physics quiz about Newton's laws\"\r\n• \"Make an astronomy quiz about stars and galaxies\"\r\n\r\nWhat specific science topic interests you? I can generate multiple choice questions, true/false, or short answer questions.`;\n            } else if (query.toLowerCase().includes(\"history\")) {\n                response = `Excellent choice! I can create history quizzes covering any time period or region. Here are some examples:\r\n\r\n**History Quiz Topics:**\r\n• \"Create a quiz about World War II\"\r\n• \"Make a quiz about ancient Egypt\"\r\n• \"Generate a quiz about the American Revolution\"\r\n• \"Create a quiz about the Renaissance period\"\r\n• \"Make a quiz about medieval times\"\r\n\r\nWhat historical period or event would you like to focus on?`;\n            } else if (query.toLowerCase().includes(\"math\")) {\n                response = `Math quizzes are my specialty! I can create questions covering any math topic. Here are some examples:\r\n\r\n**Math Quiz Topics:**\r\n• \"Create a quiz about algebra and equations\"\r\n• \"Make a geometry quiz about shapes and angles\"\r\n• \"Generate a calculus quiz about derivatives\"\r\n• \"Create a statistics quiz about probability\"\r\n• \"Make a quiz about fractions and decimals\"\r\n\r\nWhat level and type of math problems would you like? I can make them as easy or challenging as you need.`;\n            } else if (query.toLowerCase().includes(\"general knowledge\")) {\n                response = `General knowledge quizzes are fun! I can create questions covering many topics. Here are some examples:\r\n\r\n**General Knowledge Topics:**\r\n• \"Create a quiz about world capitals\"\r\n• \"Make a quiz about famous landmarks\"\r\n• \"Generate a quiz about literature and authors\"\r\n• \"Create a quiz about sports and athletes\"\r\n• \"Make a quiz about technology and inventions\"\r\n\r\nWhat area of general knowledge would you like to test?`;\n            } else {\n                response = `I'm your Quiz Agent! I can help you create quizzes on any topic. Here's how to get started:\r\n\r\n**Quick Start Options:**\r\n• Click any suggested button above (Create Quiz, Science Topics, etc.)\r\n• Type \"Create a quiz about [your topic]\"\r\n• Paste content and ask me to make a quiz from it\r\n\r\n**Examples:**\r\n• \"Create a quiz about the solar system\"\r\n• \"Make a science quiz about photosynthesis\"\r\n• \"Generate a history quiz about World War II\"\r\n• \"Create a math quiz about algebra\"\r\n\r\nWhat would you like to quiz about?`;\n            }\n        } else if (query.toLowerCase().includes(\"help\") || query.toLowerCase().includes(\"plan\") || query.toLowerCase().includes(\"explain\")) {\n            // Help/planning mode - provide guidance without needing backend\n            agentId = \"quiz-agent\";\n            response = `I'm your Quiz Agent! I can help you plan and design quizzes even when the generation service is temporarily unavailable.\r\n\r\n**I can help you with:**\r\n• Planning quiz topics and structure\r\n• Suggesting question types and formats\r\n• Explaining quiz creation best practices\r\n• Brainstorming quiz content ideas\r\n• Reviewing quiz concepts\r\n\r\n**What would you like help with?**\r\n• \"Help me plan a science quiz about photosynthesis\"\r\n• \"What topics should I include in a history quiz about World War II?\"\r\n• \"Explain how to write good multiple choice questions\"\r\n• \"Suggest quiz formats for different subjects\"\r\n\r\nHow can I assist you with quiz planning today?`;\n        } else {\n            // General chat mode\n            agentId = \"normal-mcp-agent\";\n            response = `I'm your Quiz Agent, but I can also help with general questions! You asked: \"${query}\". \r\n\r\nI'm here to assist with quiz creation, planning, and answering any questions you have. Even if the quiz generation service is temporarily unavailable, I can still help you plan quizzes and answer questions about quiz creation.\r\n\r\nHow can I help you today?`;\n        }\n        this.addChatMessage({\n            type: \"agent\",\n            content: response,\n            metadata: {\n                agentId: agentId,\n                status: \"completed\"\n            }\n        });\n        return {\n            success: true,\n            response,\n            agent: {\n                name: \"Quiz Agent\"\n            },\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Start periodic agent discovery\r\n   */ startAgentDiscovery() {\n        // Initial discovery\n        this.discoverAgents();\n        // Periodic discovery every 30 seconds\n        setInterval(()=>{\n            this.discoverAgents();\n        }, 30000);\n    }\n    /**\r\n   * Discover agents in the network\r\n   */ async discoverAgents(requestData = {}) {\n        const discoveredAgents = [];\n        for (const url of this.knownAgentUrls){\n            try {\n                const agentCard = await this.getAgentCard(url);\n                const agentInfo = {\n                    name: agentCard.name,\n                    url: url,\n                    skills: agentCard.skills?.map((s)=>s.id) || [],\n                    status: \"online\",\n                    lastSeen: new Date(),\n                    capabilities: agentCard.capabilities\n                };\n                this.agents.set(url, agentInfo);\n                discoveredAgents.push(agentInfo);\n                // Add discovery message to chat\n                this.addChatMessage({\n                    type: \"system\",\n                    content: `Discovered agent: ${agentCard.name} at ${url}`,\n                    metadata: {\n                        agentId: url\n                    }\n                });\n            } catch (error) {\n                console.error(`Failed to discover agent at ${url}:`, error);\n                const agentInfo = {\n                    name: `Unknown Agent (${url})`,\n                    url: url,\n                    skills: [],\n                    status: \"offline\",\n                    lastSeen: new Date()\n                };\n                this.agents.set(url, agentInfo);\n            }\n        }\n        return {\n            agents: discoveredAgents,\n            count: discoveredAgents.length,\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Get agent card from URL using A2A SDK\r\n   */ async getAgentCard(url) {\n        try {\n            // Import A2A client dynamically to avoid SSR issues\n            const { A2AClient } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@a2a-js\").then(__webpack_require__.bind(__webpack_require__, /*! @a2a-js/sdk/client */ \"(rsc)/./node_modules/@a2a-js/sdk/dist/client/index.js\"));\n            // Create A2A client\n            const a2aClient = new A2AClient();\n            // Get agent card using A2A SDK\n            return await a2aClient.getAgentCard(url);\n        } catch (error) {\n            console.error(\"Failed to get agent card via A2A SDK:\", error);\n            // Fallback to direct fetch if A2A SDK fails\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 5000);\n            try {\n                const response = await fetch(`${url}/.well-known/agent-card.json`, {\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                return response.json();\n            } catch (fetchError) {\n                clearTimeout(timeoutId);\n                throw fetchError;\n            }\n        }\n    }\n    /**\r\n   * Orchestrate complete quiz workflow with chat integration\r\n   *\r\n   * This method coordinates the entire quiz generation process by:\r\n   * 1. Creating a workflow with predefined steps\r\n   * 2. Executing steps in dependency order\r\n   * 3. Providing real-time chat updates throughout the process\r\n   * 4. Handling errors and providing feedback\r\n   *\r\n   * @param requestData - Contains topic, difficulty, and question_count\r\n   * @returns Promise with workflow results and status\r\n   */ async orchestrateQuizWorkflow(requestData) {\n        // Generate unique workflow ID using timestamp for uniqueness\n        const workflowId = `workflow_${Date.now()}`;\n        // Extract and set default values for quiz parameters\n        const { topic, difficulty = \"intermediate\", question_count = 5 } = requestData;\n        try {\n            // Notify chat system that workflow is starting\n            // This provides user feedback and maintains audit trail\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Starting quiz workflow for topic: \"${topic}\"`,\n                metadata: {\n                    workflowId,\n                    status: \"starting\"\n                }\n            });\n            // Define the workflow structure with two sequential steps:\n            // Step 1: Generate quiz questions (backend agent)\n            // Step 2: Display quiz (frontend agent)\n            const workflow = {\n                id: workflowId,\n                name: `Quiz Generation: ${topic}`,\n                steps: [\n                    {\n                        id: \"step_1\",\n                        agentId: \"http://localhost:4001\",\n                        skillId: \"generate-quiz\",\n                        input: {\n                            topic,\n                            difficulty,\n                            question_count\n                        },\n                        status: \"pending\"\n                    },\n                    {\n                        id: \"step_2\",\n                        agentId: \"http://localhost:3000\",\n                        skillId: \"display_quiz\",\n                        input: {},\n                        dependencies: [\n                            \"step_1\"\n                        ],\n                        status: \"pending\"\n                    }\n                ],\n                status: \"running\",\n                createdAt: new Date()\n            };\n            // Store workflow in memory for tracking and management\n            this.workflows.set(workflowId, workflow);\n            // Execute the workflow steps in dependency order with chat integration\n            // This method handles step execution, dependency checking, and chat updates\n            const result = await this.executeWorkflowWithChat(workflowId);\n            // Notify chat system of successful completion\n            // Provides user feedback on the number of questions generated\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Quiz workflow completed successfully! Generated ${result.length} questions.`,\n                metadata: {\n                    workflowId,\n                    status: \"completed\"\n                }\n            });\n            // Return structured response with workflow details\n            return {\n                workflow_id: workflowId,\n                status: \"completed\",\n                result: result,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            // Log error for debugging purposes\n            console.error(\"Workflow orchestration failed:\", error);\n            // Notify chat system of workflow failure\n            // Provides user feedback on what went wrong\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Workflow failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                metadata: {\n                    workflowId,\n                    status: \"failed\"\n                }\n            });\n            // Re-throw error to be handled by calling code\n            throw error;\n        }\n    }\n    /**\r\n   * Execute workflow with chat integration\r\n   */ async executeWorkflowWithChat(workflowId) {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) {\n            throw new Error(`Workflow ${workflowId} not found`);\n        }\n        const results = [];\n        for (const step of workflow.steps){\n            try {\n                // Add step start message to chat\n                this.addChatMessage({\n                    type: \"orchestrator\",\n                    content: `Executing step: ${step.skillId} on ${step.agentId}`,\n                    metadata: {\n                        workflowId,\n                        agentId: step.agentId,\n                        skillId: step.skillId,\n                        status: \"running\"\n                    }\n                });\n                // Check dependencies\n                if (step.dependencies) {\n                    const dependencyResults = step.dependencies.map((depId)=>{\n                        const depStep = workflow.steps.find((s)=>s.id === depId);\n                        return depStep?.result;\n                    });\n                    if (dependencyResults.some((r)=>!r)) {\n                        throw new Error(`Dependencies not met for step ${step.id}`);\n                    }\n                }\n                // Execute step\n                step.status = \"running\";\n                const result = await this.executeStep(step);\n                step.result = result;\n                step.status = \"completed\";\n                results.push(result);\n                // Add step completion message to chat\n                this.addChatMessage({\n                    type: \"agent\",\n                    content: `Step completed: ${step.skillId}`,\n                    metadata: {\n                        workflowId,\n                        agentId: step.agentId,\n                        skillId: step.skillId,\n                        status: \"completed\"\n                    }\n                });\n            } catch (error) {\n                step.status = \"failed\";\n                workflow.status = \"failed\";\n                // Add step failure message to chat\n                this.addChatMessage({\n                    type: \"agent\",\n                    content: `Step failed: ${step.skillId} - ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                    metadata: {\n                        workflowId,\n                        agentId: step.agentId,\n                        skillId: step.skillId,\n                        status: \"failed\"\n                    }\n                });\n                throw error;\n            }\n        }\n        workflow.status = \"completed\";\n        workflow.completedAt = new Date();\n        return results;\n    }\n    /**\r\n   * Execute a single workflow step using real A2A SDK\r\n   */ async executeStep(step) {\n        const agent = this.agents.get(step.agentId);\n        if (!agent) {\n            throw new Error(`Agent ${step.agentId} not found`);\n        }\n        try {\n            // Import A2A client dynamically to avoid SSR issues\n            const { A2AClient, TaskSubmissionRequest } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@a2a-js\").then(__webpack_require__.bind(__webpack_require__, /*! @a2a-js/sdk/client */ \"(rsc)/./node_modules/@a2a-js/sdk/dist/client/index.js\"));\n            // Create A2A client\n            const a2aClient = new A2AClient();\n            // Create task submission request\n            const request = {\n                skillId: step.skillId,\n                input: {\n                    parts: [\n                        {\n                            kind: \"text\",\n                            text: JSON.stringify(step.input)\n                        }\n                    ]\n                }\n            };\n            // Submit task using A2A SDK\n            const task = await a2aClient.submitTask(step.agentId, request);\n            // Wait for task completion using A2A SDK\n            const completedTask = await a2aClient.waitForTaskCompletion(step.agentId, task.id);\n            if (completedTask.status.state === \"completed\" && completedTask.artifacts) {\n                // Extract data from A2A artifacts\n                const artifact = completedTask.artifacts[0];\n                if (artifact && artifact.parts) {\n                    return JSON.parse(artifact.parts[0].text);\n                }\n            }\n            throw new Error(\"Task did not complete successfully or no data found\");\n        } catch (error) {\n            console.error(\"A2A task execution failed:\", error);\n            throw new Error(`A2A agent call failed: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    /**\r\n   * Monitor system health\r\n   */ async monitorSystemHealth(requestData) {\n        const healthChecks = [];\n        const agentEntries = Array.from(this.agents.entries());\n        for(let i = 0; i < agentEntries.length; i++){\n            const [url, agent] = agentEntries[i];\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 3000);\n                const response = await fetch(`${url}/health`, {\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                healthChecks.push({\n                    agent: agent.name,\n                    url: url,\n                    status: \"healthy\",\n                    response_time: response.headers.get(\"x-response-time\") || \"unknown\"\n                });\n            } catch (error) {\n                healthChecks.push({\n                    agent: agent.name,\n                    url: url,\n                    status: \"unhealthy\",\n                    error: error instanceof Error ? error.message : \"Unknown error\"\n                });\n            }\n        }\n        const overallHealth = healthChecks.every((h)=>h.status === \"healthy\") ? \"healthy\" : \"degraded\";\n        return {\n            overall_health: overallHealth,\n            agents: healthChecks,\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Add message to chat history\r\n   */ addChatMessage(message) {\n        const chatMessage = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            timestamp: new Date(),\n            ...message\n        };\n        this.chatHistory.push(chatMessage);\n        return chatMessage;\n    }\n    /**\r\n   * Get chat history\r\n   */ getChatHistory() {\n        return this.chatHistory;\n    }\n    /**\r\n   * Get chat history for a specific workflow\r\n   */ getWorkflowChatHistory(workflowId) {\n        return this.chatHistory.filter((msg)=>msg.metadata?.workflowId === workflowId);\n    }\n    /**\r\n   * Clear chat history\r\n   */ clearChatHistory() {\n        this.chatHistory = [];\n    }\n    /**\r\n   * Get all workflows\r\n   */ getAllWorkflows() {\n        return Array.from(this.workflows.values());\n    }\n    /**\r\n   * Get workflow by ID\r\n   */ getWorkflow(workflowId) {\n        return this.workflows.get(workflowId);\n    }\n    /**\r\n   * Get all agents\r\n   */ getAllAgents() {\n        return Array.from(this.agents.values());\n    }\n    /**\r\n   * Get agent by URL\r\n   */ getAgent(url) {\n        return this.agents.get(url);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/orchestratorService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();