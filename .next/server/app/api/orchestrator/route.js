"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/orchestrator/route";
exports.ids = ["app/api/orchestrator/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_Chan_Dra_Dev_AtoA_Protocol_A2_Quiz_quiz_frontend_src_app_api_orchestrator_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/orchestrator/route.ts */ \"(rsc)/./src/app/api/orchestrator/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/orchestrator/route\",\n        pathname: \"/api/orchestrator\",\n        filename: \"route\",\n        bundlePath: \"app/api/orchestrator/route\"\n    },\n    resolvedPagePath: \"D:\\\\Chan Dra Dev\\\\AtoA_Protocol\\\\A2\\\\Quiz\\\\quiz-frontend\\\\src\\\\app\\\\api\\\\orchestrator\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_Chan_Dra_Dev_AtoA_Protocol_A2_Quiz_quiz_frontend_src_app_api_orchestrator_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/orchestrator/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZvcmNoZXN0cmF0b3IlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm9yY2hlc3RyYXRvciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm9yY2hlc3RyYXRvciUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDQ2hhbiUyMERyYSUyMERldiU1Q0F0b0FfUHJvdG9jb2wlNUNBMiU1Q1F1aXolNUNxdWl6LWZyb250ZW5kJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1EJTNBJTVDQ2hhbiUyMERyYSUyMERldiU1Q0F0b0FfUHJvdG9jb2wlNUNBMiU1Q1F1aXolNUNxdWl6LWZyb250ZW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMrQztBQUM1SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aXotZnJvbnRlbmQvP2FhZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiRDpcXFxcQ2hhbiBEcmEgRGV2XFxcXEF0b0FfUHJvdG9jb2xcXFxcQTJcXFxcUXVpelxcXFxxdWl6LWZyb250ZW5kXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXG9yY2hlc3RyYXRvclxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvb3JjaGVzdHJhdG9yL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb3JjaGVzdHJhdG9yXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vcmNoZXN0cmF0b3Ivcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJEOlxcXFxDaGFuIERyYSBEZXZcXFxcQXRvQV9Qcm90b2NvbFxcXFxBMlxcXFxRdWl6XFxcXHF1aXotZnJvbnRlbmRcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcb3JjaGVzdHJhdG9yXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9vcmNoZXN0cmF0b3Ivcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/orchestrator/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/orchestrator/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_orchestratorService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/orchestratorService */ \"(rsc)/./src/lib/orchestratorService.ts\");\n\n\n// Global orchestrator service instance\nlet orchestratorService;\n// Initialize orchestrator service\nfunction getOrchestratorService() {\n    if (!orchestratorService) {\n        orchestratorService = new _lib_orchestratorService__WEBPACK_IMPORTED_MODULE_1__.NextJSOrchestratorService();\n    }\n    return orchestratorService;\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { action, ...data } = body;\n        let result;\n        switch(action){\n            case \"discover_agents\":\n                result = await getOrchestratorService().discoverAgents(data);\n                break;\n            case \"orchestrate_quiz_workflow\":\n                result = await getOrchestratorService().orchestrateQuizWorkflow(data);\n                break;\n            case \"orchestrate-manual-workflow\":\n                result = await getOrchestratorService().orchestrateManualWorkflow(data);\n                break;\n            case \"monitor_system_health\":\n                result = await getOrchestratorService().monitorSystemHealth(data);\n                break;\n            case \"get_chat_history\":\n                result = getOrchestratorService().getChatHistory();\n                break;\n            case \"get_workflow_chat_history\":\n                result = getOrchestratorService().getWorkflowChatHistory(data.workflowId);\n                break;\n            case \"clear_chat_history\":\n                getOrchestratorService().clearChatHistory();\n                result = {\n                    success: true\n                };\n                break;\n            case \"get_workflows\":\n                result = getOrchestratorService().getAllWorkflows();\n                break;\n            case \"get_workflow\":\n                result = getOrchestratorService().getWorkflow(data.workflowId);\n                break;\n            case \"get_agents\":\n                result = getOrchestratorService().getAllAgents();\n                break;\n            case \"get_agent\":\n                result = getOrchestratorService().getAgent(data.url);\n                break;\n            case \"determine_agent_for_query\":\n                result = getOrchestratorService().determineAgentForQuery(data.query, data.context);\n                break;\n            case \"execute_agent_with_resilience\":\n                result = await getOrchestratorService().executeAgentWithResilience(data.query, data.context);\n                break;\n            case \"handle_general_mcp_query\":\n                result = await getOrchestratorService().handleGeneralMCPQuery(data);\n                break;\n            case \"handle_centralized_request\":\n                result = await getOrchestratorService().handleCentralizedRequest(data);\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Unknown action: ${action}`\n                }, {\n                    status: 400\n                });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Orchestrator API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const action = searchParams.get(\"action\");\n        let result;\n        switch(action){\n            case \"health\":\n                result = {\n                    status: \"ok\",\n                    service: \"nextjs-orchestrator\"\n                };\n                break;\n            case \"status\":\n                result = {\n                    orchestrator: {\n                        status: \"running\",\n                        uptime: process.uptime(),\n                        memory: process.memoryUsage(),\n                        version: \"1.0.0\"\n                    },\n                    agents: {\n                        discovered: getOrchestratorService().getAllAgents().length,\n                        active: getOrchestratorService().getAllAgents().filter((a)=>a.status === \"online\").length,\n                        last_discovery: new Date().toISOString()\n                    }\n                };\n                break;\n            case \"chat_history\":\n                result = getOrchestratorService().getChatHistory();\n                break;\n            case \"workflows\":\n                result = getOrchestratorService().getAllWorkflows();\n                break;\n            case \"agents\":\n                result = getOrchestratorService().getAllAgents();\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: `Unknown action: ${action}`\n                }, {\n                    status: 400\n                });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Orchestrator GET API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/orchestrator/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/circuit-breaker.ts":
/*!************************************!*\
  !*** ./src/lib/circuit-breaker.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentCircuitBreaker: () => (/* binding */ AgentCircuitBreaker)\n/* harmony export */ });\n/**\r\n * Circuit Breaker Pattern for Agent Resilience\r\n * Prevents cascading failures and provides graceful degradation\r\n */ class AgentCircuitBreaker {\n    constructor(failureThreshold = 5, timeoutMs = 60000, successThreshold = 3){\n        this.breakers = new Map();\n        this.failureThreshold = failureThreshold;\n        this.timeoutMs = timeoutMs;\n        this.successThreshold = successThreshold;\n    }\n    /**\r\n   * Check if agent is available (circuit breaker allows)\r\n   */ isAgentAvailable(agentId) {\n        const breaker = this.breakers.get(agentId);\n        if (!breaker) return true; // No breaker = available\n        switch(breaker.state){\n            case \"closed\":\n                return true;\n            case \"open\":\n                // Check if timeout has passed\n                if (breaker.lastFailureTime && Date.now() - breaker.lastFailureTime.getTime() > this.timeoutMs) {\n                    breaker.state = \"half-open\";\n                    breaker.successCount = 0;\n                    return true;\n                }\n                return false;\n            case \"half-open\":\n                return true;\n            default:\n                return true;\n        }\n    }\n    /**\r\n   * Record a successful operation\r\n   */ recordSuccess(agentId) {\n        const breaker = this.breakers.get(agentId) || this.createBreaker(agentId);\n        breaker.successCount++;\n        breaker.failureCount = 0;\n        if (breaker.state === \"half-open\" && breaker.successCount >= this.successThreshold) {\n            breaker.state = \"closed\";\n        }\n    }\n    /**\r\n   * Record a failed operation\r\n   */ recordFailure(agentId) {\n        const breaker = this.breakers.get(agentId) || this.createBreaker(agentId);\n        breaker.failureCount++;\n        breaker.lastFailureTime = new Date();\n        if (breaker.failureCount >= this.failureThreshold) {\n            breaker.state = \"open\";\n        }\n    }\n    createBreaker(agentId) {\n        const breaker = {\n            state: \"closed\",\n            failureCount: 0,\n            successCount: 0\n        };\n        this.breakers.set(agentId, breaker);\n        return breaker;\n    }\n    /**\r\n   * Get circuit breaker status for monitoring\r\n   */ getStatus(agentId) {\n        return this.breakers.get(agentId) || null;\n    }\n    /**\r\n   * Reset circuit breaker (for manual intervention)\r\n   */ reset(agentId) {\n        this.breakers.delete(agentId);\n    }\n    /**\r\n   * Get all circuit breaker states\r\n   */ getAllStates() {\n        return new Map(this.breakers);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2NpcmN1aXQtYnJlYWtlci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBU00sTUFBTUE7SUFNWEMsWUFDRUMsbUJBQTJCLENBQUMsRUFDNUJDLFlBQW9CLEtBQUssRUFDekJDLG1CQUEyQixDQUFDLENBQzVCO2FBVE1DLFdBQTZDLElBQUlDO1FBVXZELElBQUksQ0FBQ0osZ0JBQWdCLEdBQUdBO1FBQ3hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNDLGdCQUFnQixHQUFHQTtJQUMxQjtJQUVBOztHQUVDLEdBQ0RHLGlCQUFpQkMsT0FBZSxFQUFXO1FBQ3pDLE1BQU1DLFVBQVUsSUFBSSxDQUFDSixRQUFRLENBQUNLLEdBQUcsQ0FBQ0Y7UUFDbEMsSUFBSSxDQUFDQyxTQUFTLE9BQU8sTUFBTSx5QkFBeUI7UUFFcEQsT0FBUUEsUUFBUUUsS0FBSztZQUNuQixLQUFLO2dCQUNILE9BQU87WUFDVCxLQUFLO2dCQUNILDhCQUE4QjtnQkFDOUIsSUFDRUYsUUFBUUcsZUFBZSxJQUN2QkMsS0FBS0MsR0FBRyxLQUFLTCxRQUFRRyxlQUFlLENBQUNHLE9BQU8sS0FBSyxJQUFJLENBQUNaLFNBQVMsRUFDL0Q7b0JBQ0FNLFFBQVFFLEtBQUssR0FBRztvQkFDaEJGLFFBQVFPLFlBQVksR0FBRztvQkFDdkIsT0FBTztnQkFDVDtnQkFDQSxPQUFPO1lBQ1QsS0FBSztnQkFDSCxPQUFPO1lBQ1Q7Z0JBQ0UsT0FBTztRQUNYO0lBQ0Y7SUFFQTs7R0FFQyxHQUNEQyxjQUFjVCxPQUFlLEVBQVE7UUFDbkMsTUFBTUMsVUFBVSxJQUFJLENBQUNKLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDRixZQUFZLElBQUksQ0FBQ1UsYUFBYSxDQUFDVjtRQUVqRUMsUUFBUU8sWUFBWTtRQUNwQlAsUUFBUVUsWUFBWSxHQUFHO1FBRXZCLElBQ0VWLFFBQVFFLEtBQUssS0FBSyxlQUNsQkYsUUFBUU8sWUFBWSxJQUFJLElBQUksQ0FBQ1osZ0JBQWdCLEVBQzdDO1lBQ0FLLFFBQVFFLEtBQUssR0FBRztRQUNsQjtJQUNGO0lBRUE7O0dBRUMsR0FDRFMsY0FBY1osT0FBZSxFQUFRO1FBQ25DLE1BQU1DLFVBQVUsSUFBSSxDQUFDSixRQUFRLENBQUNLLEdBQUcsQ0FBQ0YsWUFBWSxJQUFJLENBQUNVLGFBQWEsQ0FBQ1Y7UUFFakVDLFFBQVFVLFlBQVk7UUFDcEJWLFFBQVFHLGVBQWUsR0FBRyxJQUFJQztRQUU5QixJQUFJSixRQUFRVSxZQUFZLElBQUksSUFBSSxDQUFDakIsZ0JBQWdCLEVBQUU7WUFDakRPLFFBQVFFLEtBQUssR0FBRztRQUNsQjtJQUNGO0lBRVFPLGNBQWNWLE9BQWUsRUFBdUI7UUFDMUQsTUFBTUMsVUFBK0I7WUFDbkNFLE9BQU87WUFDUFEsY0FBYztZQUNkSCxjQUFjO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDWCxRQUFRLENBQUNnQixHQUFHLENBQUNiLFNBQVNDO1FBQzNCLE9BQU9BO0lBQ1Q7SUFFQTs7R0FFQyxHQUNEYSxVQUFVZCxPQUFlLEVBQThCO1FBQ3JELE9BQU8sSUFBSSxDQUFDSCxRQUFRLENBQUNLLEdBQUcsQ0FBQ0YsWUFBWTtJQUN2QztJQUVBOztHQUVDLEdBQ0RlLE1BQU1mLE9BQWUsRUFBUTtRQUMzQixJQUFJLENBQUNILFFBQVEsQ0FBQ21CLE1BQU0sQ0FBQ2hCO0lBQ3ZCO0lBRUE7O0dBRUMsR0FDRGlCLGVBQWlEO1FBQy9DLE9BQU8sSUFBSW5CLElBQUksSUFBSSxDQUFDRCxRQUFRO0lBQzlCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWl6LWZyb250ZW5kLy4vc3JjL2xpYi9jaXJjdWl0LWJyZWFrZXIudHM/MTJkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ2lyY3VpdCBCcmVha2VyIFBhdHRlcm4gZm9yIEFnZW50IFJlc2lsaWVuY2VcclxuICogUHJldmVudHMgY2FzY2FkaW5nIGZhaWx1cmVzIGFuZCBwcm92aWRlcyBncmFjZWZ1bCBkZWdyYWRhdGlvblxyXG4gKi9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2lyY3VpdEJyZWFrZXJTdGF0ZSB7XHJcbiAgc3RhdGU6IFwiY2xvc2VkXCIgfCBcIm9wZW5cIiB8IFwiaGFsZi1vcGVuXCI7XHJcbiAgZmFpbHVyZUNvdW50OiBudW1iZXI7XHJcbiAgbGFzdEZhaWx1cmVUaW1lPzogRGF0ZTtcclxuICBzdWNjZXNzQ291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFnZW50Q2lyY3VpdEJyZWFrZXIge1xyXG4gIHByaXZhdGUgYnJlYWtlcnM6IE1hcDxzdHJpbmcsIENpcmN1aXRCcmVha2VyU3RhdGU+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZmFpbHVyZVRocmVzaG9sZDogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdGltZW91dE1zOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBzdWNjZXNzVGhyZXNob2xkOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZmFpbHVyZVRocmVzaG9sZDogbnVtYmVyID0gNSxcclxuICAgIHRpbWVvdXRNczogbnVtYmVyID0gNjAwMDAsIC8vIDEgbWludXRlXHJcbiAgICBzdWNjZXNzVGhyZXNob2xkOiBudW1iZXIgPSAzXHJcbiAgKSB7XHJcbiAgICB0aGlzLmZhaWx1cmVUaHJlc2hvbGQgPSBmYWlsdXJlVGhyZXNob2xkO1xyXG4gICAgdGhpcy50aW1lb3V0TXMgPSB0aW1lb3V0TXM7XHJcbiAgICB0aGlzLnN1Y2Nlc3NUaHJlc2hvbGQgPSBzdWNjZXNzVGhyZXNob2xkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgYWdlbnQgaXMgYXZhaWxhYmxlIChjaXJjdWl0IGJyZWFrZXIgYWxsb3dzKVxyXG4gICAqL1xyXG4gIGlzQWdlbnRBdmFpbGFibGUoYWdlbnRJZDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBicmVha2VyID0gdGhpcy5icmVha2Vycy5nZXQoYWdlbnRJZCk7XHJcbiAgICBpZiAoIWJyZWFrZXIpIHJldHVybiB0cnVlOyAvLyBObyBicmVha2VyID0gYXZhaWxhYmxlXHJcblxyXG4gICAgc3dpdGNoIChicmVha2VyLnN0YXRlKSB7XHJcbiAgICAgIGNhc2UgXCJjbG9zZWRcIjpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgY2FzZSBcIm9wZW5cIjpcclxuICAgICAgICAvLyBDaGVjayBpZiB0aW1lb3V0IGhhcyBwYXNzZWRcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBicmVha2VyLmxhc3RGYWlsdXJlVGltZSAmJlxyXG4gICAgICAgICAgRGF0ZS5ub3coKSAtIGJyZWFrZXIubGFzdEZhaWx1cmVUaW1lLmdldFRpbWUoKSA+IHRoaXMudGltZW91dE1zXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBicmVha2VyLnN0YXRlID0gXCJoYWxmLW9wZW5cIjtcclxuICAgICAgICAgIGJyZWFrZXIuc3VjY2Vzc0NvdW50ID0gMDtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGNhc2UgXCJoYWxmLW9wZW5cIjpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlY29yZCBhIHN1Y2Nlc3NmdWwgb3BlcmF0aW9uXHJcbiAgICovXHJcbiAgcmVjb3JkU3VjY2VzcyhhZ2VudElkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGJyZWFrZXIgPSB0aGlzLmJyZWFrZXJzLmdldChhZ2VudElkKSB8fCB0aGlzLmNyZWF0ZUJyZWFrZXIoYWdlbnRJZCk7XHJcblxyXG4gICAgYnJlYWtlci5zdWNjZXNzQ291bnQrKztcclxuICAgIGJyZWFrZXIuZmFpbHVyZUNvdW50ID0gMDtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIGJyZWFrZXIuc3RhdGUgPT09IFwiaGFsZi1vcGVuXCIgJiZcclxuICAgICAgYnJlYWtlci5zdWNjZXNzQ291bnQgPj0gdGhpcy5zdWNjZXNzVGhyZXNob2xkXHJcbiAgICApIHtcclxuICAgICAgYnJlYWtlci5zdGF0ZSA9IFwiY2xvc2VkXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWNvcmQgYSBmYWlsZWQgb3BlcmF0aW9uXHJcbiAgICovXHJcbiAgcmVjb3JkRmFpbHVyZShhZ2VudElkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGJyZWFrZXIgPSB0aGlzLmJyZWFrZXJzLmdldChhZ2VudElkKSB8fCB0aGlzLmNyZWF0ZUJyZWFrZXIoYWdlbnRJZCk7XHJcblxyXG4gICAgYnJlYWtlci5mYWlsdXJlQ291bnQrKztcclxuICAgIGJyZWFrZXIubGFzdEZhaWx1cmVUaW1lID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICBpZiAoYnJlYWtlci5mYWlsdXJlQ291bnQgPj0gdGhpcy5mYWlsdXJlVGhyZXNob2xkKSB7XHJcbiAgICAgIGJyZWFrZXIuc3RhdGUgPSBcIm9wZW5cIjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlQnJlYWtlcihhZ2VudElkOiBzdHJpbmcpOiBDaXJjdWl0QnJlYWtlclN0YXRlIHtcclxuICAgIGNvbnN0IGJyZWFrZXI6IENpcmN1aXRCcmVha2VyU3RhdGUgPSB7XHJcbiAgICAgIHN0YXRlOiBcImNsb3NlZFwiLFxyXG4gICAgICBmYWlsdXJlQ291bnQ6IDAsXHJcbiAgICAgIHN1Y2Nlc3NDb3VudDogMCxcclxuICAgIH07XHJcbiAgICB0aGlzLmJyZWFrZXJzLnNldChhZ2VudElkLCBicmVha2VyKTtcclxuICAgIHJldHVybiBicmVha2VyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGNpcmN1aXQgYnJlYWtlciBzdGF0dXMgZm9yIG1vbml0b3JpbmdcclxuICAgKi9cclxuICBnZXRTdGF0dXMoYWdlbnRJZDogc3RyaW5nKTogQ2lyY3VpdEJyZWFrZXJTdGF0ZSB8IG51bGwge1xyXG4gICAgcmV0dXJuIHRoaXMuYnJlYWtlcnMuZ2V0KGFnZW50SWQpIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCBjaXJjdWl0IGJyZWFrZXIgKGZvciBtYW51YWwgaW50ZXJ2ZW50aW9uKVxyXG4gICAqL1xyXG4gIHJlc2V0KGFnZW50SWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5icmVha2Vycy5kZWxldGUoYWdlbnRJZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgYWxsIGNpcmN1aXQgYnJlYWtlciBzdGF0ZXNcclxuICAgKi9cclxuICBnZXRBbGxTdGF0ZXMoKTogTWFwPHN0cmluZywgQ2lyY3VpdEJyZWFrZXJTdGF0ZT4ge1xyXG4gICAgcmV0dXJuIG5ldyBNYXAodGhpcy5icmVha2Vycyk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJBZ2VudENpcmN1aXRCcmVha2VyIiwiY29uc3RydWN0b3IiLCJmYWlsdXJlVGhyZXNob2xkIiwidGltZW91dE1zIiwic3VjY2Vzc1RocmVzaG9sZCIsImJyZWFrZXJzIiwiTWFwIiwiaXNBZ2VudEF2YWlsYWJsZSIsImFnZW50SWQiLCJicmVha2VyIiwiZ2V0Iiwic3RhdGUiLCJsYXN0RmFpbHVyZVRpbWUiLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsInN1Y2Nlc3NDb3VudCIsInJlY29yZFN1Y2Nlc3MiLCJjcmVhdGVCcmVha2VyIiwiZmFpbHVyZUNvdW50IiwicmVjb3JkRmFpbHVyZSIsInNldCIsImdldFN0YXR1cyIsInJlc2V0IiwiZGVsZXRlIiwiZ2V0QWxsU3RhdGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/circuit-breaker.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/dynamic-agent-discovery.ts":
/*!********************************************!*\
  !*** ./src/lib/dynamic-agent-discovery.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamicAgentDiscovery: () => (/* binding */ DynamicAgentDiscovery)\n/* harmony export */ });\n/**\r\n * Dynamic Agent Discovery and Service Registry\r\n * Handles multiple agents dynamically without hardcoded URLs\r\n */ class DynamicAgentDiscovery {\n    constructor(config){\n        this.discoveredAgents = new Map();\n        this.discoveryInterval = null;\n        this.config = config;\n        this.startDiscovery();\n    }\n    /**\r\n   * Start agent discovery based on configuration\r\n   */ startDiscovery() {\n        // Initial discovery\n        this.performDiscovery();\n        // Periodic discovery every 30 seconds\n        this.discoveryInterval = setInterval(()=>{\n            this.performDiscovery();\n        }, 30000);\n    }\n    /**\r\n   * Perform discovery based on configured method\r\n   */ async performDiscovery() {\n        try {\n            switch(this.config.discoveryMethod){\n                case \"environment\":\n                    await this.discoverFromEnvironment();\n                    break;\n                case \"consul\":\n                    await this.discoverFromConsul();\n                    break;\n                case \"kubernetes\":\n                    await this.discoverFromKubernetes();\n                    break;\n                case \"multicast\":\n                    await this.discoverFromMulticast();\n                    break;\n                case \"manual\":\n                    await this.discoverFromManual();\n                    break;\n                default:\n                    console.warn(`Unknown discovery method: ${this.config.discoveryMethod}`);\n            }\n        } catch (error) {\n            console.error(\"Agent discovery failed:\", error);\n        }\n    }\n    /**\r\n   * Discover agents from environment variables\r\n   */ async discoverFromEnvironment() {\n        if (!this.config.environment) return;\n        const { prefix, ports = [\n            3000,\n            4001\n        ], hosts = [\n            \"localhost\"\n        ] } = this.config.environment;\n        for (const host of hosts){\n            for (const port of ports){\n                const url = `http://${host}:${port}`;\n                const agentId = `${host}:${port}`;\n                try {\n                    // Check if agent exists and get its capabilities\n                    const agentInfo = await this.probeAgent(url);\n                    if (agentInfo) {\n                        this.discoveredAgents.set(agentId, {\n                            id: agentId,\n                            name: agentInfo.name || `Agent-${agentId}`,\n                            url,\n                            capabilities: agentInfo.capabilities || [],\n                            status: \"online\",\n                            lastSeen: new Date(),\n                            metadata: {\n                                version: agentInfo.version,\n                                instance: agentId,\n                                tags: [\n                                    `env:${prefix}`\n                                ]\n                            }\n                        });\n                    }\n                } catch (error) {\n                    // Mark as offline if probe fails\n                    const existing = this.discoveredAgents.get(agentId);\n                    if (existing) {\n                        existing.status = \"offline\";\n                        existing.lastSeen = new Date();\n                    }\n                }\n            }\n        }\n    }\n    /**\r\n   * Discover agents from Consul service registry\r\n   */ async discoverFromConsul() {\n        if (!this.config.consul) return;\n        const { host, port, serviceName } = this.config.consul;\n        const consulUrl = `http://${host}:${port}`;\n        try {\n            const response = await fetch(`${consulUrl}/v1/health/service/${serviceName}`);\n            const services = await response.json();\n            for (const service of services){\n                const agent = service.Service;\n                const agentId = agent.ID;\n                this.discoveredAgents.set(agentId, {\n                    id: agentId,\n                    name: agent.Service,\n                    url: `http://${agent.Address}:${agent.Port}`,\n                    capabilities: agent.Tags || [],\n                    status: \"online\",\n                    lastSeen: new Date(),\n                    metadata: {\n                        version: agent.Meta?.version,\n                        region: service.Node?.Datacenter,\n                        instance: agentId,\n                        tags: agent.Tags\n                    }\n                });\n            }\n        } catch (error) {\n            console.error(\"Consul discovery failed:\", error);\n        }\n    }\n    /**\r\n   * Discover agents from Kubernetes\r\n   */ async discoverFromKubernetes() {\n        if (!this.config.kubernetes) return;\n        const { namespace, labelSelector } = this.config.kubernetes;\n        try {\n            // This would use Kubernetes API to discover services\n            // Implementation depends on your K8s setup\n            const response = await fetch(`/api/v1/namespaces/${namespace}/services?labelSelector=${labelSelector}`);\n            const services = await response.json();\n            for (const service of services.items){\n                const agentId = service.metadata.name;\n                const url = `http://${service.spec.clusterIP}:${service.spec.ports[0].port}`;\n                this.discoveredAgents.set(agentId, {\n                    id: agentId,\n                    name: service.metadata.name,\n                    url,\n                    capabilities: service.metadata.labels?.capabilities?.split(\",\") || [],\n                    status: \"online\",\n                    lastSeen: new Date(),\n                    metadata: {\n                        version: service.metadata.labels?.version,\n                        namespace: service.metadata.namespace,\n                        instance: agentId,\n                        tags: Object.keys(service.metadata.labels || {})\n                    }\n                });\n            }\n        } catch (error) {\n            console.error(\"Kubernetes discovery failed:\", error);\n        }\n    }\n    /**\r\n   * Discover agents using multicast\r\n   */ async discoverFromMulticast() {\n        if (!this.config.multicast) return;\n        // Implementation would use UDP multicast to discover agents\n        // This is a simplified version\n        console.log(\"Multicast discovery not implemented yet\");\n    }\n    /**\r\n   * Use manually configured agents\r\n   */ async discoverFromManual() {\n        if (!this.config.manual) return;\n        for (const agentConfig of this.config.manual.agents){\n            try {\n                const agentInfo = await this.probeAgent(agentConfig.url);\n                if (agentInfo) {\n                    this.discoveredAgents.set(agentConfig.id, {\n                        id: agentConfig.id,\n                        name: agentInfo.name || agentConfig.id,\n                        url: agentConfig.url,\n                        capabilities: agentConfig.capabilities,\n                        status: \"online\",\n                        lastSeen: new Date(),\n                        metadata: agentConfig.metadata\n                    });\n                }\n            } catch (error) {\n                console.warn(`Failed to probe manual agent ${agentConfig.id}:`, error);\n            }\n        }\n    }\n    /**\r\n   * Probe an agent to get its information\r\n   */ async probeAgent(url) {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 5000);\n        try {\n            const response = await fetch(`${url}/.well-known/agent-card.json`, {\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (response.ok) {\n                return await response.json();\n            }\n        } catch (error) {\n            clearTimeout(timeoutId);\n            throw error;\n        }\n        return null;\n    }\n    /**\r\n   * Get all discovered agents\r\n   */ getAllAgents() {\n        return Array.from(this.discoveredAgents.values());\n    }\n    /**\r\n   * Get agents by capability\r\n   */ getAgentsByCapability(capability) {\n        return this.getAllAgents().filter((agent)=>agent.capabilities.includes(capability));\n    }\n    /**\r\n   * Get online agents only\r\n   */ getOnlineAgents() {\n        return this.getAllAgents().filter((agent)=>agent.status === \"online\");\n    }\n    /**\r\n   * Get agent by ID\r\n   */ getAgent(agentId) {\n        return this.discoveredAgents.get(agentId);\n    }\n    /**\r\n   * Stop discovery\r\n   */ stop() {\n        if (this.discoveryInterval) {\n            clearInterval(this.discoveryInterval);\n            this.discoveryInterval = null;\n        }\n    }\n    /**\r\n   * Update agent status\r\n   */ updateAgentStatus(agentId, status) {\n        const agent = this.discoveredAgents.get(agentId);\n        if (agent) {\n            agent.status = status;\n            agent.lastSeen = new Date();\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/dynamic-agent-discovery.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/enhanced-agent-selector.ts":
/*!********************************************!*\
  !*** ./src/lib/enhanced-agent-selector.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnhancedAgentSelector: () => (/* binding */ EnhancedAgentSelector)\n/* harmony export */ });\n/**\r\n * Enhanced Agent Selection System\r\n * Provides sophisticated agent routing based on multiple criteria\r\n */ class EnhancedAgentSelector {\n    /**\r\n   * Register an agent with its capabilities\r\n   */ registerAgent(agent) {\n        this.agents.set(agent.id, agent);\n        // Build capability index for faster lookups\n        agent.capabilities.forEach((capability)=>{\n            if (!this.capabilityIndex.has(capability.id)) {\n                this.capabilityIndex.set(capability.id, []);\n            }\n            this.capabilityIndex.get(capability.id).push(agent);\n        });\n    }\n    /**\r\n   * Select the best agent for a given query using multiple criteria\r\n   */ selectAgent(query, context) {\n        const queryLower = query.toLowerCase();\n        const candidates = [];\n        // Score each agent based on multiple criteria\n        for (const agent of Array.from(this.agents.values())){\n            if (agent.status !== \"online\") continue;\n            const { score, reasoning } = this.scoreAgent(agent, queryLower, context);\n            if (score > 0) {\n                candidates.push({\n                    agent,\n                    score,\n                    reasoning\n                });\n            }\n        }\n        // Sort by score (highest first)\n        candidates.sort((a, b)=>b.score - a.score);\n        if (candidates.length === 0) {\n            return {\n                agent: null,\n                confidence: 0,\n                reasoning: \"No suitable agents found\"\n            };\n        }\n        const best = candidates[0];\n        return {\n            agent: best.agent,\n            confidence: best.score,\n            reasoning: best.reasoning\n        };\n    }\n    /**\r\n   * Score an agent based on multiple criteria\r\n   */ scoreAgent(agent, queryLower, context) {\n        let totalScore = 0;\n        const reasons = [];\n        // 1. Capability matching (40% weight)\n        const capabilityScore = this.calculateCapabilityScore(agent, queryLower);\n        totalScore += capabilityScore * 0.4;\n        if (capabilityScore > 0) {\n            reasons.push(`Capability match: ${capabilityScore.toFixed(2)}`);\n        }\n        // 2. Agent availability (20% weight)\n        const availabilityScore = this.calculateAvailabilityScore(agent);\n        totalScore += availabilityScore * 0.2;\n        reasons.push(`Availability: ${availabilityScore.toFixed(2)}`);\n        // 3. Performance metrics (20% weight)\n        const performanceScore = this.calculatePerformanceScore(agent);\n        totalScore += performanceScore * 0.2;\n        reasons.push(`Performance: ${performanceScore.toFixed(2)}`);\n        // 4. Context awareness (20% weight)\n        const contextScore = this.calculateContextScore(agent, context);\n        totalScore += contextScore * 0.2;\n        if (contextScore > 0) {\n            reasons.push(`Context match: ${contextScore.toFixed(2)}`);\n        }\n        return {\n            score: Math.min(totalScore, 1),\n            reasoning: reasons.join(\", \")\n        };\n    }\n    calculateCapabilityScore(agent, queryLower) {\n        let bestMatch = 0;\n        for (const capability of agent.capabilities){\n            let capabilityScore = 0;\n            // Check keyword matches\n            const keywordMatches = capability.keywords.filter((keyword)=>queryLower.includes(keyword.toLowerCase())).length;\n            if (keywordMatches > 0) {\n                capabilityScore = keywordMatches / capability.keywords.length * capability.confidence;\n                bestMatch = Math.max(bestMatch, capabilityScore);\n            }\n        }\n        return bestMatch;\n    }\n    calculateAvailabilityScore(agent) {\n        // Factor in status, load, and recent activity\n        let score = 1.0;\n        if (agent.status === \"busy\") score *= 0.7;\n        if (agent.status === \"maintenance\") score *= 0.1;\n        if (agent.load > 0.8) score *= 0.5;\n        // Check if agent was recently active\n        const timeSinceLastSeen = Date.now() - agent.lastSeen.getTime();\n        if (timeSinceLastSeen > 300000) {\n            // 5 minutes\n            score *= 0.8;\n        }\n        return score;\n    }\n    calculatePerformanceScore(agent) {\n        // Combine response time and reliability\n        const responseScore = Math.max(0, 1 - agent.responseTime / 5000); // 5s max\n        const reliabilityScore = agent.reliability;\n        return (responseScore + reliabilityScore) / 2;\n    }\n    calculateContextScore(agent, context) {\n        if (!context) return 0.5; // Neutral score if no context\n        let score = 0.5; // Base score\n        // Adjust based on urgency\n        if (context.urgency === \"high\" && agent.responseTime < 1000) {\n            score += 0.3;\n        }\n        // Adjust based on complexity\n        if (context.complexity === \"complex\" && agent.capabilities.length > 3) {\n            score += 0.2;\n        }\n        return Math.min(score, 1.0);\n    }\n    /**\r\n   * Get fallback agents if primary selection fails\r\n   */ getFallbackAgents(query, excludeAgentId) {\n        const candidates = Array.from(this.agents.values()).filter((agent)=>agent.status === \"online\" && agent.id !== excludeAgentId).sort((a, b)=>b.reliability - a.reliability);\n        return candidates.slice(0, 3); // Return top 3 fallbacks\n    }\n    /**\r\n   * Update agent metrics after task completion\r\n   */ updateAgentMetrics(agentId, success, responseTime) {\n        const agent = this.agents.get(agentId);\n        if (!agent) return;\n        // Update reliability (exponential moving average)\n        agent.reliability = agent.reliability * 0.9 + (success ? 1 : 0) * 0.1;\n        // Update response time (exponential moving average)\n        agent.responseTime = agent.responseTime * 0.8 + responseTime * 0.2;\n        // Update last seen\n        agent.lastSeen = new Date();\n    }\n    /**\r\n   * Get all registered agents\r\n   */ getAllAgents() {\n        return Array.from(this.agents.values());\n    }\n    /**\r\n   * Get agent by ID\r\n   */ getAgent(agentId) {\n        return this.agents.get(agentId);\n    }\n    constructor(){\n        this.agents = new Map();\n        this.capabilityIndex = new Map();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/enhanced-agent-selector.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/environment-agent-manager.ts":
/*!**********************************************!*\
  !*** ./src/lib/environment-agent-manager.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EnvironmentAgentManager: () => (/* binding */ EnvironmentAgentManager)\n/* harmony export */ });\n/**\r\n * Environment-based Agent Configuration\r\n * Handles different environments (dev, staging, prod) dynamically\r\n */ class EnvironmentAgentManager {\n    constructor(environment = \"development\"){\n        this.discoveredAgents = new Map();\n        this.config = this.loadEnvironmentConfig(environment);\n        this.discoverAgents();\n    }\n    /**\r\n   * Load configuration based on environment\r\n   */ loadEnvironmentConfig(environment) {\n        const configs = {\n            development: {\n                name: \"development\",\n                agents: {\n                    frontend: {\n                        url: \"http://localhost:3000\",\n                        instances: [\n                            \"http://localhost:3000\",\n                            \"http://localhost:3001\"\n                        ]\n                    },\n                    backend: {\n                        url: process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\",\n                        instances: [\n                            process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\",\n                            process.env.NEXT_PUBLIC_MANUAL_AGENT_URL || \"http://localhost:4002\"\n                        ]\n                    },\n                    services: [\n                        {\n                            name: \"quiz-generator\",\n                            url: process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\",\n                            capabilities: [\n                                \"quiz-generation\",\n                                \"content-analysis\"\n                            ]\n                        },\n                        {\n                            name: \"quiz-display\",\n                            url: \"http://localhost:3000\",\n                            capabilities: [\n                                \"ui-orchestration\",\n                                \"quiz-display\"\n                            ]\n                        }\n                    ]\n                }\n            },\n            staging: {\n                name: \"staging\",\n                agents: {\n                    frontend: {\n                        url: \"https://quiz-frontend-staging.example.com\",\n                        instances: [\n                            \"https://quiz-frontend-staging.example.com\",\n                            \"https://quiz-frontend-staging-2.example.com\"\n                        ]\n                    },\n                    backend: {\n                        url: \"https://quiz-backend-staging.example.com\",\n                        instances: [\n                            \"https://quiz-backend-staging.example.com\",\n                            \"https://quiz-backend-staging-2.example.com\"\n                        ]\n                    },\n                    services: [\n                        {\n                            name: \"quiz-generator\",\n                            url: \"https://quiz-backend-staging.example.com\",\n                            capabilities: [\n                                \"quiz-generation\",\n                                \"content-analysis\"\n                            ]\n                        },\n                        {\n                            name: \"quiz-display\",\n                            url: \"https://quiz-frontend-staging.example.com\",\n                            capabilities: [\n                                \"ui-orchestration\",\n                                \"quiz-display\"\n                            ]\n                        }\n                    ]\n                }\n            },\n            production: {\n                name: \"production\",\n                agents: {\n                    frontend: {\n                        url: \"https://quiz-frontend.example.com\",\n                        instances: [\n                            \"https://quiz-frontend.example.com\",\n                            \"https://quiz-frontend-2.example.com\",\n                            \"https://quiz-frontend-3.example.com\"\n                        ]\n                    },\n                    backend: {\n                        url: \"https://quiz-backend.example.com\",\n                        instances: [\n                            \"https://quiz-backend.example.com\",\n                            \"https://quiz-backend-2.example.com\",\n                            \"https://quiz-backend-3.example.com\"\n                        ]\n                    },\n                    services: [\n                        {\n                            name: \"quiz-generator\",\n                            url: \"https://quiz-backend.example.com\",\n                            capabilities: [\n                                \"quiz-generation\",\n                                \"content-analysis\"\n                            ]\n                        },\n                        {\n                            name: \"quiz-display\",\n                            url: \"https://quiz-frontend.example.com\",\n                            capabilities: [\n                                \"ui-orchestration\",\n                                \"quiz-display\"\n                            ]\n                        }\n                    ]\n                }\n            }\n        };\n        return configs[environment] || configs.development;\n    }\n    /**\r\n   * Discover agents from environment configuration\r\n   */ async discoverAgents() {\n        const { agents } = this.config;\n        // Add frontend agents\n        if (agents.frontend.instances) {\n            for (const url of agents.frontend.instances){\n                await this.addAgent({\n                    id: `frontend-${url}`,\n                    name: \"Frontend Agent\",\n                    url,\n                    capabilities: [\n                        \"ui-orchestration\",\n                        \"quiz-display\"\n                    ],\n                    type: \"frontend\"\n                });\n            }\n        }\n        // Add backend agents\n        if (agents.backend.instances) {\n            for (const url of agents.backend.instances){\n                await this.addAgent({\n                    id: `backend-${url}`,\n                    name: \"Backend Agent\",\n                    url,\n                    capabilities: [\n                        \"quiz-generation\",\n                        \"content-analysis\"\n                    ],\n                    type: \"backend\"\n                });\n            }\n        }\n        // Add additional services\n        if (agents.services) {\n            for (const service of agents.services){\n                if (service.instances) {\n                    for (const url of service.instances){\n                        await this.addAgent({\n                            id: `${service.name}-${url}`,\n                            name: service.name,\n                            url,\n                            capabilities: service.capabilities,\n                            type: \"service\"\n                        });\n                    }\n                } else {\n                    await this.addAgent({\n                        id: service.name,\n                        name: service.name,\n                        url: service.url,\n                        capabilities: service.capabilities,\n                        type: \"service\"\n                    });\n                }\n            }\n        }\n    }\n    /**\r\n   * Add agent to registry\r\n   */ async addAgent(agentInfo) {\n        try {\n            // Probe agent to verify it's online\n            const isOnline = await this.probeAgent(agentInfo.url);\n            this.discoveredAgents.set(agentInfo.id, {\n                ...agentInfo,\n                status: isOnline ? \"online\" : \"offline\",\n                lastSeen: new Date()\n            });\n        } catch (error) {\n            console.warn(`Failed to probe agent ${agentInfo.id}:`, error);\n            this.discoveredAgents.set(agentInfo.id, {\n                ...agentInfo,\n                status: \"offline\",\n                lastSeen: new Date()\n            });\n        }\n    }\n    /**\r\n   * Probe agent to check if it's online\r\n   */ async probeAgent(url) {\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 3000);\n            const response = await fetch(`${url}/health`, {\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            return response.ok;\n        } catch (error) {\n            return false;\n        }\n    }\n    /**\r\n   * Get all agents\r\n   */ getAllAgents() {\n        return Array.from(this.discoveredAgents.values());\n    }\n    /**\r\n   * Get agents by type\r\n   */ getAgentsByType(type) {\n        return this.getAllAgents().filter((agent)=>agent.type === type);\n    }\n    /**\r\n   * Get agents by capability\r\n   */ getAgentsByCapability(capability) {\n        return this.getAllAgents().filter((agent)=>agent.capabilities.includes(capability));\n    }\n    /**\r\n   * Get load-balanced agent URL\r\n   */ getLoadBalancedAgent(capability) {\n        const agents = this.getAgentsByCapability(capability).filter((agent)=>agent.status === \"online\");\n        if (agents.length === 0) return null;\n        // Simple round-robin load balancing\n        const index = Math.floor(Math.random() * agents.length);\n        return agents[index].url;\n    }\n    /**\r\n   * Get primary agent URL (first available)\r\n   */ getPrimaryAgent(capability) {\n        const agent = this.getAgentsByCapability(capability).find((agent)=>agent.status === \"online\");\n        return agent ? agent.url : null;\n    }\n    /**\r\n   * Get environment name\r\n   */ getEnvironmentName() {\n        return this.config.name;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/environment-agent-manager.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/orchestratorService.ts":
/*!****************************************!*\
  !*** ./src/lib/orchestratorService.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NextJSOrchestratorService: () => (/* binding */ NextJSOrchestratorService)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist-node/v4.js\");\n/* harmony import */ var _enhanced_agent_selector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./enhanced-agent-selector */ \"(rsc)/./src/lib/enhanced-agent-selector.ts\");\n/* harmony import */ var _circuit_breaker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./circuit-breaker */ \"(rsc)/./src/lib/circuit-breaker.ts\");\n/* harmony import */ var _dynamic_agent_discovery__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dynamic-agent-discovery */ \"(rsc)/./src/lib/dynamic-agent-discovery.ts\");\n/* harmony import */ var _environment_agent_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment-agent-manager */ \"(rsc)/./src/lib/environment-agent-manager.ts\");\n\n\n\n\n\nclass NextJSOrchestratorService {\n    constructor(){\n        this.agents = new Map();\n        this.workflows = new Map();\n        this.chatHistory = [];\n        // Dynamic agent URLs based on environment\n        this.knownAgentUrls = [\n            `${\"http://localhost:5000\" || 0}/.well-known/agent-card.json`,\n            `${process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\"}/.well-known/agent-card.json`,\n            `${process.env.NEXT_PUBLIC_MANUAL_AGENT_URL || \"http://localhost:4002\"}/.well-known/agent-card.json`\n        ];\n        this.retryAttempts = 3;\n        this.timeoutMs = 30000;\n        // Dynamic discovery components\n        this.dynamicDiscovery = null;\n        // Initialize enhanced components\n        this.enhancedAgentSelector = new _enhanced_agent_selector__WEBPACK_IMPORTED_MODULE_0__.EnhancedAgentSelector();\n        this.circuitBreaker = new _circuit_breaker__WEBPACK_IMPORTED_MODULE_1__.AgentCircuitBreaker();\n        // Initialize environment-based agent management\n        const environment = \"development\" || 0;\n        this.environmentManager = new _environment_agent_manager__WEBPACK_IMPORTED_MODULE_3__.EnvironmentAgentManager(environment);\n        this.startAgentDiscovery();\n        this.initializeVirtualAgents();\n        this.initializeEnhancedAgents();\n        this.initializeDynamicDiscovery();\n    }\n    /**\r\n   * Initialize enhanced agent profiles with capabilities\r\n   */ initializeEnhancedAgents() {\n        // Backend Quiz Agent\n        const backendAgent = {\n            id: \"backend-quiz-agent\",\n            name: \"Quiz Generation Agent\",\n            url: process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\",\n            capabilities: [\n                {\n                    id: \"quiz-generation\",\n                    name: \"Generate Quiz Questions\",\n                    description: \"Creates quiz questions on any topic\",\n                    keywords: [\n                        \"quiz\",\n                        \"question\",\n                        \"test\",\n                        \"exam\",\n                        \"assessment\",\n                        \"multiple choice\",\n                        \"generate\",\n                        \"create\"\n                    ],\n                    confidence: 0.95,\n                    requirements: [\n                        \"openai-api\"\n                    ]\n                },\n                {\n                    id: \"content-analysis\",\n                    name: \"Content Analysis\",\n                    description: \"Analyzes and processes educational content\",\n                    keywords: [\n                        \"analyze\",\n                        \"content\",\n                        \"educational\",\n                        \"material\",\n                        \"process\"\n                    ],\n                    confidence: 0.85\n                }\n            ],\n            status: \"online\",\n            load: 0.0,\n            responseTime: 2000,\n            reliability: 0.95,\n            lastSeen: new Date()\n        };\n        // Frontend Agent\n        const frontendAgent = {\n            id: \"frontend-agent\",\n            name: \"Frontend Orchestration Agent\",\n            url: \"http://localhost:3000\",\n            capabilities: [\n                {\n                    id: \"ui-orchestration\",\n                    name: \"UI Orchestration\",\n                    description: \"Manages user interface and workflow coordination\",\n                    keywords: [\n                        \"workflow\",\n                        \"orchestrate\",\n                        \"coordinate\",\n                        \"manage\",\n                        \"ui\",\n                        \"interface\",\n                        \"display\",\n                        \"render\"\n                    ],\n                    confidence: 0.9\n                },\n                {\n                    id: \"quiz-display\",\n                    name: \"Quiz Display\",\n                    description: \"Renders and manages quiz interfaces\",\n                    keywords: [\n                        \"display\",\n                        \"render\",\n                        \"show\",\n                        \"present\",\n                        \"quiz interface\"\n                    ],\n                    confidence: 0.88\n                }\n            ],\n            status: \"online\",\n            load: 0.0,\n            responseTime: 500,\n            reliability: 0.98,\n            lastSeen: new Date()\n        };\n        // Virtual MCP Agent\n        const mcpAgent = {\n            id: \"virtual-mcp-agent\",\n            name: \"General MCP Agent\",\n            url: \"virtual://normal-mcp-agent\",\n            capabilities: [\n                {\n                    id: \"general-conversation\",\n                    name: \"General Conversation\",\n                    description: \"Handles general queries and conversations\",\n                    keywords: [\n                        \"help\",\n                        \"explain\",\n                        \"general\",\n                        \"conversation\",\n                        \"chat\",\n                        \"assist\"\n                    ],\n                    confidence: 0.8\n                },\n                {\n                    id: \"information-retrieval\",\n                    name: \"Information Retrieval\",\n                    description: \"Retrieves and provides information\",\n                    keywords: [\n                        \"information\",\n                        \"retrieve\",\n                        \"lookup\",\n                        \"search\",\n                        \"find\"\n                    ],\n                    confidence: 0.75\n                }\n            ],\n            status: \"online\",\n            load: 0.0,\n            responseTime: 1000,\n            reliability: 0.9,\n            lastSeen: new Date()\n        };\n        // Register all agents with enhanced selector\n        this.enhancedAgentSelector.registerAgent(backendAgent);\n        this.enhancedAgentSelector.registerAgent(frontendAgent);\n        this.enhancedAgentSelector.registerAgent(mcpAgent);\n    }\n    /**\r\n   * Initialize dynamic agent discovery based on environment\r\n   */ initializeDynamicDiscovery() {\n        const discoveryMethod = process.env.AGENT_DISCOVERY_METHOD || \"environment\";\n        const discoveryConfig = {\n            discoveryMethod: discoveryMethod,\n            environment: {\n                prefix: process.env.AGENT_PREFIX || \"QUIZ_AGENT\",\n                ports: this.parsePorts(process.env.AGENT_PORTS || \"3000,4001,5000\"),\n                hosts: this.parseHosts(process.env.AGENT_HOSTS || \"localhost\")\n            },\n            manual: {\n                agents: this.environmentManager.getAllAgents().map((agent)=>({\n                        id: agent.id,\n                        url: agent.url,\n                        capabilities: agent.capabilities,\n                        metadata: agent.metadata\n                    }))\n            }\n        };\n        try {\n            this.dynamicDiscovery = new _dynamic_agent_discovery__WEBPACK_IMPORTED_MODULE_2__.DynamicAgentDiscovery(discoveryConfig);\n            console.log(`Dynamic agent discovery initialized with method: ${discoveryMethod}`);\n        } catch (error) {\n            console.warn(\"Failed to initialize dynamic discovery, falling back to environment manager:\", error);\n        }\n    }\n    /**\r\n   * Parse comma-separated ports string\r\n   */ parsePorts(portsString) {\n        return portsString.split(\",\").map((port)=>parseInt(port.trim())).filter((port)=>!isNaN(port));\n    }\n    /**\r\n   * Parse comma-separated hosts string\r\n   */ parseHosts(hostsString) {\n        return hostsString.split(\",\").map((host)=>host.trim()).filter((host)=>host.length > 0);\n    }\n    /**\r\n   * Initialize virtual MCP agents that don't have physical endpoints\r\n   */ initializeVirtualAgents() {\n        // Add the normal MCP agent as a virtual agent\n        const normalMCPAgent = {\n            name: \"General MCP Agent\",\n            url: \"virtual://normal-mcp-agent\",\n            skills: [\n                \"general-conversation\",\n                \"information-retrieval\",\n                \"task-assistance\"\n            ],\n            status: \"online\",\n            lastSeen: new Date(),\n            capabilities: {\n                description: \"Handles general queries, conversations, and non-quiz related tasks\",\n                type: \"virtual\"\n            }\n        };\n        this.agents.set(\"virtual://normal-mcp-agent\", normalMCPAgent);\n    }\n    /**\r\n   * Get all available agents (dynamic + legacy)\r\n   */ getAllAvailableAgents() {\n        const agents = [];\n        // Add dynamically discovered agents\n        if (this.dynamicDiscovery) {\n            agents.push(...this.dynamicDiscovery.getAllAgents());\n        }\n        // Add environment-managed agents\n        agents.push(...this.environmentManager.getAllAgents());\n        // Add legacy agents for backward compatibility\n        const legacyAgents = Array.from(this.agents.values());\n        agents.push(...legacyAgents);\n        // Remove duplicates based on URL\n        const uniqueAgents = agents.filter((agent, index, self)=>index === self.findIndex((a)=>a.url === agent.url));\n        return uniqueAgents;\n    }\n    /**\r\n   * Get agents by capability with load balancing\r\n   */ getAgentsByCapability(capability) {\n        const agents = [];\n        // Get from dynamic discovery\n        if (this.dynamicDiscovery) {\n            agents.push(...this.dynamicDiscovery.getAgentsByCapability(capability));\n        }\n        // Get from environment manager\n        agents.push(...this.environmentManager.getAgentsByCapability(capability));\n        // Get from legacy agents\n        const legacyAgents = Array.from(this.agents.values()).filter((agent)=>agent.skills?.includes(capability));\n        agents.push(...legacyAgents);\n        // Remove duplicates and return online agents only\n        const uniqueAgents = agents.filter((agent, index, self)=>index === self.findIndex((a)=>a.url === agent.url));\n        return uniqueAgents.filter((agent)=>agent.status === \"online\");\n    }\n    /**\r\n   * Get load-balanced agent URL for a capability\r\n   */ getLoadBalancedAgentUrl(capability) {\n        // Try environment manager first (has load balancing)\n        const envAgent = this.environmentManager.getLoadBalancedAgent(capability);\n        if (envAgent) return envAgent;\n        // Fall back to dynamic discovery\n        if (this.dynamicDiscovery) {\n            const dynamicAgents = this.dynamicDiscovery.getAgentsByCapability(capability);\n            if (dynamicAgents.length > 0) {\n                const index = Math.floor(Math.random() * dynamicAgents.length);\n                return dynamicAgents[index].url;\n            }\n        }\n        // Fall back to legacy hardcoded URLs\n        switch(capability){\n            case \"quiz-generation\":\n            case \"content-analysis\":\n                return process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\";\n            case \"ui-orchestration\":\n            case \"quiz-display\":\n                return \"http://localhost:3000\";\n            default:\n                return null;\n        }\n    }\n    /**\r\n   * Get primary agent URL for a capability\r\n   */ getPrimaryAgentUrl(capability) {\n        // Try environment manager first\n        const envAgent = this.environmentManager.getPrimaryAgent(capability);\n        if (envAgent) return envAgent;\n        // Fall back to dynamic discovery\n        if (this.dynamicDiscovery) {\n            const dynamicAgents = this.dynamicDiscovery.getAgentsByCapability(capability);\n            if (dynamicAgents.length > 0) {\n                return dynamicAgents[0].url;\n            }\n        }\n        // Fall back to legacy hardcoded URLs\n        switch(capability){\n            case \"quiz-generation\":\n            case \"content-analysis\":\n                return process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\";\n            case \"ui-orchestration\":\n            case \"quiz-display\":\n                return \"http://localhost:3000\";\n            default:\n                return null;\n        }\n    }\n    /**\r\n   * Enhanced agent selection using sophisticated scoring\r\n   */ determineAgentForQuery(query, context) {\n        const result = this.enhancedAgentSelector.selectAgent(query, context);\n        // Add to chat history for transparency\n        this.addChatMessage({\n            type: \"system\",\n            content: `Agent selection: ${result.agent?.name || \"None\"} (confidence: ${result.confidence.toFixed(2)}, reasoning: ${result.reasoning})`,\n            metadata: {\n                agentId: result.agent?.id,\n                status: \"selection_complete\"\n            }\n        });\n        return result;\n    }\n    /**\r\n   * Legacy method for backward compatibility\r\n   */ determineAgentForQueryLegacy(query) {\n        const lowerQuery = query.toLowerCase();\n        // Quiz-related queries go to backend agent\n        if (lowerQuery.includes(\"quiz\") || lowerQuery.includes(\"question\") || lowerQuery.includes(\"test\") || lowerQuery.includes(\"exam\") || lowerQuery.includes(\"assessment\") || lowerQuery.includes(\"multiple choice\")) {\n            return this.agents.get(process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\") || null;\n        }\n        // Workflow/orchestration queries go to frontend agent\n        if (lowerQuery.includes(\"workflow\") || lowerQuery.includes(\"orchestrate\") || lowerQuery.includes(\"coordinate\") || lowerQuery.includes(\"manage\")) {\n            return this.agents.get(\"http://localhost:3000\") || null;\n        }\n        // All other queries go to normal MCP agent\n        return this.agents.get(\"virtual://normal-mcp-agent\") || null;\n    }\n    /**\r\n   * Enhanced agent execution with circuit breaker and retry logic\r\n   */ async executeAgentWithResilience(query, context) {\n        const startTime = Date.now();\n        let selectionTime = 0;\n        let executionTime = 0;\n        try {\n            // Step 1: Select primary agent using enhanced selector\n            const selectionStart = Date.now();\n            const { agent, confidence, reasoning } = this.enhancedAgentSelector.selectAgent(query, context);\n            selectionTime = Date.now() - selectionStart;\n            if (!agent) {\n                return {\n                    success: false,\n                    agent: null,\n                    error: \"No suitable agent found\",\n                    metrics: {\n                        selectionTime,\n                        executionTime: 0,\n                        totalTime: Date.now() - startTime\n                    }\n                };\n            }\n            // Step 2: Check circuit breaker\n            if (!this.circuitBreaker.isAgentAvailable(agent.id)) {\n                console.warn(`Agent ${agent.id} is circuit-broken, trying fallback`);\n                return await this.tryFallbackExecution(query, context, agent.id, startTime, selectionTime);\n            }\n            // Step 3: Execute with retry logic\n            const executionStart = Date.now();\n            const result = await this.executeWithRetry(agent, query, context);\n            executionTime = Date.now() - executionStart;\n            // Record success\n            this.circuitBreaker.recordSuccess(agent.id);\n            this.enhancedAgentSelector.updateAgentMetrics(agent.id, true, executionTime);\n            return {\n                success: true,\n                agent,\n                result,\n                metrics: {\n                    selectionTime,\n                    executionTime,\n                    totalTime: Date.now() - startTime\n                }\n            };\n        } catch (error) {\n            // Record failure and try fallback\n            const agent = this.enhancedAgentSelector.selectAgent(query, context).agent;\n            if (agent) {\n                this.circuitBreaker.recordFailure(agent.id);\n                this.enhancedAgentSelector.updateAgentMetrics(agent.id, false, executionTime);\n            }\n            return await this.tryFallbackExecution(query, context, agent?.id, startTime, selectionTime);\n        }\n    }\n    /**\r\n   * Execute agent with retry logic\r\n   */ async executeWithRetry(agent, query, context) {\n        let lastError = null;\n        for(let attempt = 1; attempt <= this.retryAttempts; attempt++){\n            try {\n                if (agent.url.startsWith(\"virtual://\")) {\n                    return await this.executeVirtualAgent(agent, query, context);\n                } else {\n                    return await this.executeRealAgent(agent, query, context);\n                }\n            } catch (error) {\n                lastError = error;\n                console.warn(`Attempt ${attempt} failed for agent ${agent.id}:`, error);\n                if (attempt < this.retryAttempts) {\n                    // Exponential backoff\n                    await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 1000));\n                }\n            }\n        }\n        throw lastError || new Error(\"All retry attempts failed\");\n    }\n    /**\r\n   * Try fallback agents if primary fails\r\n   */ async tryFallbackExecution(query, context, excludeAgentId, startTime, selectionTime) {\n        const fallbackAgents = this.enhancedAgentSelector.getFallbackAgents(query, excludeAgentId);\n        for (const agent of fallbackAgents){\n            if (!this.circuitBreaker.isAgentAvailable(agent.id)) continue;\n            try {\n                const executionStart = Date.now();\n                const result = await this.executeWithRetry(agent, query, context);\n                const executionTime = Date.now() - executionStart;\n                this.circuitBreaker.recordSuccess(agent.id);\n                this.enhancedAgentSelector.updateAgentMetrics(agent.id, true, executionTime);\n                return {\n                    success: true,\n                    agent,\n                    result,\n                    fallbackUsed: true,\n                    metrics: {\n                        selectionTime,\n                        executionTime,\n                        totalTime: Date.now() - startTime\n                    }\n                };\n            } catch (error) {\n                this.circuitBreaker.recordFailure(agent.id);\n                console.warn(`Fallback agent ${agent.id} also failed:`, error);\n            }\n        }\n        return {\n            success: false,\n            agent: null,\n            error: \"All agents failed, including fallbacks\",\n            metrics: {\n                selectionTime,\n                executionTime: 0,\n                totalTime: Date.now() - startTime\n            }\n        };\n    }\n    /**\r\n   * Execute virtual agent (like MCP)\r\n   */ async executeVirtualAgent(agent, query, context) {\n        // Use existing handleGeneralMCPQuery logic\n        return await this.handleGeneralMCPQuery({\n            query,\n            context\n        });\n    }\n    /**\r\n   * Execute real agent via A2A\r\n   */ async executeRealAgent(agent, query, context) {\n        // Use existing A2A execution logic from executeStep\n        const step = {\n            id: \"enhanced-step\",\n            agentId: agent.url,\n            skillId: \"enhanced-execution\",\n            input: {\n                query,\n                context\n            },\n            status: \"running\"\n        };\n        return await this.executeStep(step);\n    }\n    /**\r\n   * Most important function in the orchestrator service\r\n   * Centralized decision maker - determines whether to route to Backend or DeepSeek\r\n   */ async handleCentralizedRequest(requestData) {\n        const { query, context } = requestData;\n        // Add query to chat history\n        this.addChatMessage({\n            type: \"user\",\n            content: query,\n            metadata: {\n                status: \"processing\"\n            }\n        });\n        try {\n            // Use DeepSeek AI to classify the request\n            const requestType = await this.classifyRequestType(query);\n            if (requestType === \"quiz\") {\n                // Route to Backend Agent for quiz generation\n                console.log(\"\\uD83C\\uDFAF Orchestrator Decision: Quiz Request → Backend Agent\");\n                return await this.routeToBackendAgent(query, context);\n            } else if (requestType === \"manual\") {\n                // Route to Manual Generation\n                console.log(\"\\uD83D\\uDCD6 Orchestrator Decision: Manual Request → Manual Generator\");\n                return await this.routeToManualGenerator(query, context);\n            } else {\n                // Route to DeepSeek API for general chat\n                console.log(\"\\uD83D\\uDCAC Orchestrator Decision: Chat Request → DeepSeek API\");\n                return await this.routeToDeepSeekAPI(query, context);\n            }\n        } catch (error) {\n            console.error(\"Error in centralized request handling:\", error);\n            // Fallback to simple pattern matching\n            const lowerQuery = query.toLowerCase();\n            const isQuizFallback = lowerQuery.includes(\"create\") && lowerQuery.includes(\"quiz\") || lowerQuery.includes(\"generate\") && lowerQuery.includes(\"quiz\") || lowerQuery.includes(\"make\") && lowerQuery.includes(\"quiz\") || lowerQuery.includes(\"quiz about\") || lowerQuery.includes(\"quiz on\");\n            const isManualFallback = lowerQuery.includes(\"create\") && lowerQuery.includes(\"manual\") || lowerQuery.includes(\"generate\") && lowerQuery.includes(\"manual\") || lowerQuery.includes(\"make\") && lowerQuery.includes(\"manual\") || lowerQuery.includes(\"write\") && lowerQuery.includes(\"manual\") || lowerQuery.includes(\"manual about\") || lowerQuery.includes(\"manual on\") || lowerQuery.includes(\"documentation about\") || lowerQuery.includes(\"guide about\");\n            try {\n                if (isQuizFallback) {\n                    return await this.routeToBackendAgent(query, context);\n                } else if (isManualFallback) {\n                    return await this.routeToManualGenerator(query, context);\n                } else {\n                    return await this.routeToDeepSeekAPI(query, context);\n                }\n            } catch (fallbackError) {\n                console.error(\"Fallback routing also failed:\", fallbackError);\n                // Ultimate fallback - return a simple response\n                this.addChatMessage({\n                    type: \"agent\",\n                    content: \"I apologize, but I'm experiencing technical difficulties. Please try again later or rephrase your request.\",\n                    metadata: {\n                        agentId: \"fallback-agent\",\n                        status: \"error\"\n                    }\n                });\n                return {\n                    type: \"error\",\n                    response: \"I apologize, but I'm experiencing technical difficulties. Please try again later or rephrase your request.\",\n                    agentId: \"fallback-agent\",\n                    chatHistory: this.getChatHistory()\n                };\n            }\n        }\n    }\n    /**\r\n   * Classify request type using DeepSeek AI\r\n   */ async classifyRequestType(query) {\n        try {\n            // Import OpenAI dynamically\n            const OpenAI = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"))).default;\n            const client = new OpenAI({\n                apiKey: \"sk-6796ea0f38c7499dbf47c7ff2a026966\",\n                baseURL: \"https://api.deepseek.com\"\n            });\n            const completion = await client.chat.completions.create({\n                model: \"deepseek-chat\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `You are a classifier that determines the type of user request. Return ONLY one of these three options: \"quiz\", \"manual\", or \"chat\".\r\n\r\nExamples of quiz requests:\r\n- \"create a quiz about science\"\r\n- \"generate a quiz on history\"\r\n- \"make a quiz for math\"\r\n- \"quiz about programming\"\r\n- \"create questions about biology\"\r\n\r\nExamples of manual requests:\r\n- \"create a manual about React\"\r\n- \"generate documentation for Python\"\r\n- \"write a guide about cooking\"\r\n- \"manual about JavaScript\"\r\n- \"documentation about machine learning\"\r\n\r\nExamples of chat requests:\r\n- \"hello\"\r\n- \"what is photosynthesis?\"\r\n- \"help me understand calculus\"\r\n- \"tell me about the weather\"\r\n- \"how are you?\"`\n                    },\n                    {\n                        role: \"user\",\n                        content: query\n                    }\n                ],\n                max_tokens: 10,\n                temperature: 0.1,\n                stream: false\n            });\n            const response = completion.choices[0]?.message?.content?.toLowerCase().trim();\n            if (response === \"quiz\") return \"quiz\";\n            if (response === \"manual\") return \"manual\";\n            return \"chat\";\n        } catch (error) {\n            console.error(\"DeepSeek classification error:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Classify request using DeepSeek AI (legacy method for backward compatibility)\r\n   */ async classifyRequest(query) {\n        try {\n            // Import OpenAI dynamically\n            const OpenAI = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"))).default;\n            const client = new OpenAI({\n                apiKey: \"sk-6796ea0f38c7499dbf47c7ff2a026966\",\n                baseURL: \"https://api.deepseek.com\"\n            });\n            const completion = await client.chat.completions.create({\n                model: \"deepseek-chat\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `You are a classifier that determines if a user message is requesting quiz creation.\r\n\r\nReturn ONLY \"true\" or \"false\" based on whether the user wants to create a quiz.\r\n\r\nExamples of quiz requests:\r\n- \"create a quiz about science\"\r\n- \"generate a quiz on history\"\r\n- \"make a quiz for math\"\r\n- \"quiz about programming\"\r\n- \"create questions about biology\"\r\n\r\nExamples of NOT quiz requests:\r\n- \"hello\"\r\n- \"what is photosynthesis?\"\r\n- \"help me understand calculus\"\r\n- \"tell me about the weather\"\r\n- \"how are you?\"`\n                    },\n                    {\n                        role: \"user\",\n                        content: query\n                    }\n                ],\n                max_tokens: 10,\n                temperature: 0.1,\n                stream: false\n            });\n            const response = completion.choices[0]?.message?.content?.toLowerCase().trim();\n            console.log(\"DeepSeek classification response:\", response);\n            return response === \"true\";\n        } catch (error) {\n            console.error(\"DeepSeek classification error:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Route to Backend Agent for quiz generation\r\n   */ async routeToBackendAgent(query, context) {\n        // Temporarily skip backend agent due to complexity issues\n        // Go directly to DeepSeek API for quiz generation\n        console.log(\"\\uD83D\\uDD04 Using DeepSeek API for quiz generation (backend agent temporarily disabled)...\");\n        return await this.routeToDeepSeekAPIForQuiz(query, context);\n    }\n    /**\r\n   * Route to Manual Generator\r\n   */ async routeToManualGenerator(query, context) {\n        try {\n            // Add routing message to chat\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Routing manual request to Manual Creator Agent...`,\n                metadata: {\n                    status: \"routing\"\n                }\n            });\n            // Use DeepSeek API directly for manual generation (manual-creator-agent integration pending)\n            console.log(\"Using DeepSeek API for manual generation...\");\n            const manual = await this.generateManualWithDeepSeek(query, \"\");\n            // Add completion message\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Manual generation completed successfully!`,\n                metadata: {\n                    status: \"completed\"\n                }\n            });\n            return {\n                type: \"manual\",\n                result: {\n                    data: manual\n                },\n                agentId: \"manual-generator-agent\",\n                chatHistory: this.getChatHistory()\n            };\n        } catch (error) {\n            console.error(\"Manual generator routing failed:\", error);\n            // Fallback to general chat\n            console.log(\"\\uD83D\\uDD04 Falling back to general chat...\");\n            return await this.routeToDeepSeekAPI(query, context);\n        }\n    }\n    /**\r\n   * Route to DeepSeek API for quiz generation (fallback)\r\n   */ async routeToDeepSeekAPIForQuiz(query, context) {\n        try {\n            // Add fallback message to chat\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Backend agent unavailable, using DeepSeek API for quiz generation...`,\n                metadata: {\n                    status: \"fallback\"\n                }\n            });\n            // Import OpenAI dynamically\n            const OpenAI = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"))).default;\n            const client = new OpenAI({\n                apiKey: \"sk-6796ea0f38c7499dbf47c7ff2a026966\",\n                baseURL: \"https://api.deepseek.com\"\n            });\n            const completion = await client.chat.completions.create({\n                model: \"deepseek-chat\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `You are an expert quiz creator specializing in educational content. Create a comprehensive quiz based on the user's request.\r\n\r\nGenerate exactly 20 multiple-choice questions with 4 options each (A, B, C, D). Format your response as JSON:\r\n\r\n{\r\n  \"quiz_questions\": [\r\n    {\r\n      \"question\": \"Question text here\",\r\n      \"correct_answer\": \"A\",\r\n      \"answers\": [\r\n        {\"answer\": \"Option A\"},\r\n        {\"answer\": \"Option B\"},\r\n        {\"answer\": \"Option C\"},\r\n        {\"answer\": \"Option D\"}\r\n      ],\r\n      \"difficulty\": \"medium\"\r\n    }\r\n  ]\r\n}\r\n\r\nCRITICAL REQUIREMENTS:\r\n- Create diverse, educational questions about the specific topic requested\r\n- Do NOT repeat the same question or similar questions\r\n- Each question should test different aspects of the topic\r\n- Questions should be factually accurate and educational\r\n- Vary the difficulty levels (easy, medium, hard)\r\n- Make sure correct answers are distributed randomly across A, B, C, D positions\r\n- Questions should be clear, concise, and well-written\r\n- Focus on important concepts, not trivial details\r\n- IMPORTANT: Return ONLY valid JSON, no additional text or explanations`\n                    },\n                    {\n                        role: \"user\",\n                        content: `Create a quiz about: ${query}`\n                    }\n                ],\n                max_tokens: 4000,\n                temperature: 0.7,\n                stream: false\n            });\n            const response = completion.choices[0]?.message?.content || \"{}\";\n            console.log(\"DeepSeek API response:\", response);\n            try {\n                // Try to extract JSON from the response if it contains extra text\n                let jsonString = response.trim();\n                // Look for JSON object boundaries\n                const jsonStart = jsonString.indexOf(\"{\");\n                const jsonEnd = jsonString.lastIndexOf(\"}\");\n                if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n                    jsonString = jsonString.substring(jsonStart, jsonEnd + 1);\n                }\n                const quizData = JSON.parse(jsonString);\n                // Add completion message\n                this.addChatMessage({\n                    type: \"orchestrator\",\n                    content: `Quiz generated successfully using DeepSeek API!`,\n                    metadata: {\n                        status: \"completed\"\n                    }\n                });\n                return {\n                    type: \"quiz\",\n                    result: {\n                        data: quizData\n                    },\n                    agentId: \"deepseek-quiz-agent\",\n                    chatHistory: this.getChatHistory()\n                };\n            } catch (parseError) {\n                // If JSON parsing fails, try to generate a better fallback quiz\n                console.log(\"JSON parsing failed, attempting to generate fallback quiz...\");\n                const topic = query.toLowerCase().replace(/create a quiz about|quiz about|generate.*quiz.*about|make.*quiz.*about/gi, \"\").trim() || \"general knowledge\";\n                // Try to generate a better quiz using a simpler prompt\n                try {\n                    const fallbackCompletion = await client.chat.completions.create({\n                        model: \"deepseek-chat\",\n                        messages: [\n                            {\n                                role: \"system\",\n                                content: `Create 20 educational multiple-choice questions about \"${topic}\". Each question should have 4 options (A, B, C, D). Return ONLY valid JSON in this exact format:\r\n\r\n{\r\n  \"quiz_questions\": [\r\n    {\r\n      \"question\": \"What is...?\",\r\n      \"correct_answer\": \"A\",\r\n      \"answers\": [\r\n        {\"answer\": \"Option A\"},\r\n        {\"answer\": \"Option B\"},\r\n        {\"answer\": \"Option C\"},\r\n        {\"answer\": \"Option D\"}\r\n      ],\r\n      \"difficulty\": \"medium\"\r\n    }\r\n  ]\r\n}\r\n\r\nMake questions educational and factually accurate about ${topic}.`\n                            },\n                            {\n                                role: \"user\",\n                                content: `Create a quiz about ${topic}`\n                            }\n                        ],\n                        max_tokens: 3000,\n                        temperature: 0.5,\n                        stream: false\n                    });\n                    const fallbackResponse = fallbackCompletion.choices[0]?.message?.content || \"{}\";\n                    console.log(\"Fallback API response:\", fallbackResponse);\n                    // Try to parse the fallback response\n                    let fallbackJsonString = fallbackResponse.trim();\n                    const fallbackJsonStart = fallbackJsonString.indexOf(\"{\");\n                    const fallbackJsonEnd = fallbackJsonString.lastIndexOf(\"}\");\n                    if (fallbackJsonStart !== -1 && fallbackJsonEnd !== -1 && fallbackJsonEnd > fallbackJsonStart) {\n                        fallbackJsonString = fallbackJsonString.substring(fallbackJsonStart, fallbackJsonEnd + 1);\n                    }\n                    const fallbackQuiz = JSON.parse(fallbackJsonString);\n                    return {\n                        type: \"quiz\",\n                        result: {\n                            data: fallbackQuiz\n                        },\n                        agentId: \"deepseek-fallback-agent\",\n                        chatHistory: this.getChatHistory()\n                    };\n                } catch (fallbackError) {\n                    console.error(\"Fallback quiz generation also failed:\", fallbackError);\n                }\n                // Ultimate fallback - return error message\n                this.addChatMessage({\n                    type: \"orchestrator\",\n                    content: `Failed to generate quiz for \"${topic}\". Please try again with a different topic.`,\n                    metadata: {\n                        status: \"error\"\n                    }\n                });\n                return {\n                    type: \"error\",\n                    response: `I apologize, but I couldn't generate a quiz about \"${topic}\". Please try again with a different topic or rephrase your request.`,\n                    agentId: \"error-agent\",\n                    chatHistory: this.getChatHistory()\n                };\n            }\n        } catch (error) {\n            console.error(\"DeepSeek API quiz generation failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Route to DeepSeek API for general chat\r\n   */ async routeToDeepSeekAPI(query, context) {\n        try {\n            // Add routing message to chat\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Routing chat request to DeepSeek API...`,\n                metadata: {\n                    status: \"routing\"\n                }\n            });\n            // Import OpenAI dynamically\n            const OpenAI = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"))).default;\n            const client = new OpenAI({\n                apiKey: \"sk-6796ea0f38c7499dbf47c7ff2a026966\",\n                baseURL: \"https://api.deepseek.com\"\n            });\n            // Get recent chat history for context\n            const recentHistory = this.chatHistory.filter((msg)=>msg.type !== \"system\").slice(-10).map((msg)=>({\n                    role: msg.type === \"user\" ? \"user\" : \"assistant\",\n                    content: msg.content\n                }));\n            const completion = await client.chat.completions.create({\n                model: \"deepseek-chat\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `You are a helpful AI assistant integrated into a quiz application. You can:\r\n\r\n1. **Answer general questions** - Provide helpful, accurate, and friendly responses\r\n2. **Help with quiz creation** - When users ask to create quizzes, guide them on how to do so\r\n3. **Provide educational support** - Help with learning and understanding various topics\r\n\r\nGuidelines:\r\n- Be conversational and friendly\r\n- Keep responses concise but informative\r\n- If someone asks to create a quiz, explain that they should use phrases like \"create a quiz about [topic]\" or \"generate a quiz on [subject]\"\r\n- Always be helpful and encouraging\r\n- If you don't know something, say so honestly\r\n\r\nCurrent context: You're helping a user who is using a quiz application.`\n                    },\n                    ...recentHistory,\n                    {\n                        role: \"user\",\n                        content: query\n                    }\n                ],\n                max_tokens: 500,\n                temperature: 0.7,\n                stream: false\n            });\n            const response = completion.choices[0]?.message?.content || \"I apologize, but I couldn't generate a response.\";\n            // Add response to chat history\n            this.addChatMessage({\n                type: \"agent\",\n                content: response,\n                metadata: {\n                    agentId: \"deepseek-chat-agent\",\n                    status: \"completed\"\n                }\n            });\n            return {\n                type: \"chat\",\n                response,\n                agentId: \"deepseek-chat-agent\",\n                chatHistory: this.getChatHistory()\n            };\n        } catch (error) {\n            console.error(\"DeepSeek API routing failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Handle general MCP queries that don't require specific agent routing\r\n   */ async handleGeneralMCPQuery(requestData) {\n        const { query, context } = requestData;\n        const chatMode = context?.chatMode || \"quiz\"; // Default to quiz mode\n        // Add query to chat history\n        this.addChatMessage({\n            type: \"user\",\n            content: query,\n            metadata: {\n                status: \"processing\"\n            }\n        });\n        let response = \"\";\n        let agentId = \"\";\n        if (chatMode === \"quiz\" || query.toLowerCase().includes(\"quiz\") || query.toLowerCase().includes(\"question\")) {\n            // Quiz-focused responses\n            agentId = \"quiz-agent\";\n            if (query.toLowerCase().includes(\"create quiz\")) {\n                response = `Great! I'd love to help you create a quiz. What topic would you like the quiz to cover? \r\n\r\n**Examples you can try:**\r\n• \"Create a quiz about the solar system\"\r\n• \"Make a science quiz about photosynthesis\" \r\n• \"Generate a history quiz about the Renaissance\"\r\n• \"Create a math quiz about algebra\"\r\n• \"Make a quiz about JavaScript programming\"\r\n\r\nJust tell me the topic and I'll create 20 multiple-choice questions for you!`;\n            } else if (query.toLowerCase().includes(\"science\")) {\n                response = `Perfect! I can create science quizzes on any topic. Here are some examples:\r\n\r\n**Science Quiz Topics:**\r\n• \"Create a quiz about the solar system and planets\"\r\n• \"Make a biology quiz about human anatomy\"\r\n• \"Generate a chemistry quiz about periodic table\"\r\n• \"Create a physics quiz about Newton's laws\"\r\n• \"Make an astronomy quiz about stars and galaxies\"\r\n\r\nWhat specific science topic interests you? I can generate multiple choice questions, true/false, or short answer questions.`;\n            } else if (query.toLowerCase().includes(\"history\")) {\n                response = `Excellent choice! I can create history quizzes covering any time period or region. Here are some examples:\r\n\r\n**History Quiz Topics:**\r\n• \"Create a quiz about World War II\"\r\n• \"Make a quiz about ancient Egypt\"\r\n• \"Generate a quiz about the American Revolution\"\r\n• \"Create a quiz about the Renaissance period\"\r\n• \"Make a quiz about medieval times\"\r\n\r\nWhat historical period or event would you like to focus on?`;\n            } else if (query.toLowerCase().includes(\"math\")) {\n                response = `Math quizzes are my specialty! I can create questions covering any math topic. Here are some examples:\r\n\r\n**Math Quiz Topics:**\r\n• \"Create a quiz about algebra and equations\"\r\n• \"Make a geometry quiz about shapes and angles\"\r\n• \"Generate a calculus quiz about derivatives\"\r\n• \"Create a statistics quiz about probability\"\r\n• \"Make a quiz about fractions and decimals\"\r\n\r\nWhat level and type of math problems would you like? I can make them as easy or challenging as you need.`;\n            } else if (query.toLowerCase().includes(\"general knowledge\")) {\n                response = `General knowledge quizzes are fun! I can create questions covering many topics. Here are some examples:\r\n\r\n**General Knowledge Topics:**\r\n• \"Create a quiz about world capitals\"\r\n• \"Make a quiz about famous landmarks\"\r\n• \"Generate a quiz about literature and authors\"\r\n• \"Create a quiz about sports and athletes\"\r\n• \"Make a quiz about technology and inventions\"\r\n\r\nWhat area of general knowledge would you like to test?`;\n            } else {\n                response = `I'm your Quiz Agent! I can help you create quizzes on any topic. Here's how to get started:\r\n\r\n**Quick Start Options:**\r\n• Click any suggested button above (Create Quiz, Science Topics, etc.)\r\n• Type \"Create a quiz about [your topic]\"\r\n• Paste content and ask me to make a quiz from it\r\n\r\n**Examples:**\r\n• \"Create a quiz about the solar system\"\r\n• \"Make a science quiz about photosynthesis\"\r\n• \"Generate a history quiz about World War II\"\r\n• \"Create a math quiz about algebra\"\r\n\r\nWhat would you like to quiz about?`;\n            }\n        } else if (query.toLowerCase().includes(\"help\") || query.toLowerCase().includes(\"plan\") || query.toLowerCase().includes(\"explain\")) {\n            // Help/planning mode - provide guidance without needing backend\n            agentId = \"quiz-agent\";\n            response = `I'm your Quiz Agent! I can help you plan and design quizzes even when the generation service is temporarily unavailable.\r\n\r\n**I can help you with:**\r\n• Planning quiz topics and structure\r\n• Suggesting question types and formats\r\n• Explaining quiz creation best practices\r\n• Brainstorming quiz content ideas\r\n• Reviewing quiz concepts\r\n\r\n**What would you like help with?**\r\n• \"Help me plan a science quiz about photosynthesis\"\r\n• \"What topics should I include in a history quiz about World War II?\"\r\n• \"Explain how to write good multiple choice questions\"\r\n• \"Suggest quiz formats for different subjects\"\r\n\r\nHow can I assist you with quiz planning today?`;\n        } else {\n            // General chat mode\n            agentId = \"normal-mcp-agent\";\n            response = `I'm your Quiz Agent, but I can also help with general questions! You asked: \"${query}\". \r\n\r\nI'm here to assist with quiz creation, planning, and answering any questions you have. Even if the quiz generation service is temporarily unavailable, I can still help you plan quizzes and answer questions about quiz creation.\r\n\r\nHow can I help you today?`;\n        }\n        this.addChatMessage({\n            type: \"agent\",\n            content: response,\n            metadata: {\n                agentId: agentId,\n                status: \"completed\"\n            }\n        });\n        return {\n            success: true,\n            response,\n            agent: {\n                name: \"Quiz Agent\"\n            },\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Start periodic agent discovery\r\n   */ startAgentDiscovery() {\n        // Initial discovery\n        this.discoverAgents();\n        // Periodic discovery every 30 seconds\n        setInterval(()=>{\n            this.discoverAgents();\n        }, 30000);\n    }\n    /**\r\n   * Discover agents in the network using A2A protocol\r\n   */ async discoverAgents(requestData = {}) {\n        const discoveredAgents = [];\n        console.log(\"\\uD83D\\uDD0D Starting A2A agent discovery...\");\n        for (const agentCardUrl of this.knownAgentUrls){\n            try {\n                console.log(`🔍 Discovering agent at ${agentCardUrl}...`);\n                const agentCard = await this.getAgentCard(agentCardUrl);\n                // Extract base URL from agent card URL\n                const baseUrl = agentCardUrl.replace(\"/.well-known/agent-card.json\", \"\");\n                const agentInfo = {\n                    name: agentCard.name || `Agent-${baseUrl.split(\":\").pop()}`,\n                    url: baseUrl,\n                    skills: agentCard.skills?.map((s)=>s.id) || [],\n                    status: \"online\",\n                    lastSeen: new Date(),\n                    capabilities: agentCard.capabilities\n                };\n                this.agents.set(baseUrl, agentInfo);\n                discoveredAgents.push(agentInfo);\n                console.log(`✅ Successfully discovered agent: ${agentInfo.name} at ${baseUrl}`);\n                // Add discovery message to chat\n                this.addChatMessage({\n                    type: \"system\",\n                    content: `Discovered agent: ${agentInfo.name} at ${baseUrl} with ${agentInfo.skills.length} skills`,\n                    metadata: {\n                        agentId: baseUrl,\n                        skillId: agentInfo.skills.join(\",\"),\n                        status: \"discovered\"\n                    }\n                });\n            } catch (error) {\n                console.error(`❌ Failed to discover agent at ${agentCardUrl}:`, error);\n                // Extract base URL from agent card URL\n                const baseUrl = agentCardUrl.replace(\"/.well-known/agent-card.json\", \"\");\n                const agentInfo = {\n                    name: `Unknown Agent (${baseUrl})`,\n                    url: baseUrl,\n                    skills: [],\n                    status: \"offline\",\n                    lastSeen: new Date()\n                };\n                this.agents.set(baseUrl, agentInfo);\n                discoveredAgents.push(agentInfo);\n                // Add failure message to chat\n                this.addChatMessage({\n                    type: \"system\",\n                    content: `Failed to discover agent at ${baseUrl}: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                    metadata: {\n                        agentId: baseUrl,\n                        status: \"offline\"\n                    }\n                });\n            }\n        }\n        console.log(`🎯 Agent discovery completed. Found ${discoveredAgents.length} agents.`);\n        return {\n            agents: discoveredAgents,\n            count: discoveredAgents.length,\n            onlineCount: discoveredAgents.filter((a)=>a.status === \"online\").length,\n            offlineCount: discoveredAgents.filter((a)=>a.status === \"offline\").length,\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Get agent card from URL using A2A SDK\r\n   */ async getAgentCard(url) {\n        try {\n            // Import A2A client dynamically to avoid SSR issues\n            const { A2AClient } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@a2a-js\").then(__webpack_require__.bind(__webpack_require__, /*! @a2a-js/sdk/client */ \"(rsc)/./node_modules/@a2a-js/sdk/dist/client/index.js\"));\n            // Create A2A client using fromCardUrl static method\n            const a2aClient = await A2AClient.fromCardUrl(url);\n            // Return the agent card from the client\n            return await a2aClient.getAgentCard();\n        } catch (error) {\n            console.error(\"Failed to get agent card via A2A SDK:\", error);\n            // Fallback to direct fetch if A2A SDK fails\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 5000);\n            try {\n                const response = await fetch(`${url}/.well-known/agent-card.json`, {\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                return response.json();\n            } catch (fetchError) {\n                clearTimeout(timeoutId);\n                throw fetchError;\n            }\n        }\n    }\n    /**\r\n   * Orchestrate complete quiz workflow with chat integration\r\n   *\r\n   * This method coordinates the entire quiz generation process by:\r\n   * 1. Creating a workflow with predefined steps\r\n   * 2. Executing steps in dependency order\r\n   * 3. Providing real-time chat updates throughout the process\r\n   * 4. Handling errors and providing feedback\r\n   *\r\n   * @param requestData - Contains topic, difficulty, and question_count\r\n   * @returns Promise with workflow results and status\r\n   */ async orchestrateQuizWorkflow(requestData) {\n        // Generate unique workflow ID using timestamp for uniqueness\n        const workflowId = `workflow_${Date.now()}`;\n        // Extract and set default values for quiz parameters\n        const { topic, difficulty = \"intermediate\", question_count = 20 } = requestData;\n        try {\n            // Notify chat system that workflow is starting\n            // This provides user feedback and maintains audit trail\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Starting quiz workflow for topic: \"${topic}\"`,\n                metadata: {\n                    workflowId,\n                    status: \"starting\"\n                }\n            });\n            // Define the workflow structure with two sequential steps:\n            // Step 1: Generate quiz questions (backend agent)\n            // Step 2: Display quiz (frontend agent)\n            const workflow = {\n                id: workflowId,\n                name: `Quiz Generation: ${topic}`,\n                steps: [\n                    {\n                        id: \"step_1\",\n                        agentId: process.env.NEXT_PUBLIC_QUIZ_AGENT_URL || \"http://localhost:4001\",\n                        skillId: \"generate-quiz\",\n                        input: {\n                            topic,\n                            difficulty,\n                            question_count\n                        },\n                        status: \"pending\"\n                    },\n                    {\n                        id: \"step_2\",\n                        agentId: \"http://localhost:3000\",\n                        skillId: \"display_quiz\",\n                        input: {},\n                        dependencies: [\n                            \"step_1\"\n                        ],\n                        status: \"pending\"\n                    }\n                ],\n                status: \"running\",\n                createdAt: new Date()\n            };\n            // Store workflow in memory for tracking and management\n            this.workflows.set(workflowId, workflow);\n            // Execute the workflow steps in dependency order with chat integration\n            // This method handles step execution, dependency checking, and chat updates\n            const result = await this.executeWorkflowWithChat(workflowId);\n            // Notify chat system of successful completion\n            // Provides user feedback on the number of questions generated\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Quiz workflow completed successfully! Generated ${result.length} questions.`,\n                metadata: {\n                    workflowId,\n                    status: \"completed\"\n                }\n            });\n            // Return structured response with workflow details\n            return {\n                workflow_id: workflowId,\n                status: \"completed\",\n                result: result,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            // Log error for debugging purposes\n            console.error(\"Workflow orchestration failed:\", error);\n            // Notify chat system of workflow failure\n            // Provides user feedback on what went wrong\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Workflow failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                metadata: {\n                    workflowId,\n                    status: \"failed\"\n                }\n            });\n            // Re-throw error to be handled by calling code\n            throw error;\n        }\n    }\n    /**\r\n   * Orchestrate manual generation workflow\r\n   */ async orchestrateManualWorkflow(requestData) {\n        // Generate unique workflow ID using timestamp for uniqueness\n        const workflowId = `manual_workflow_${Date.now()}`;\n        // Extract and set default values for manual parameters\n        const { topic, prompt = \"\" } = requestData;\n        try {\n            // Notify chat system that workflow is starting\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Starting manual workflow for topic: \"${topic}\"`,\n                metadata: {\n                    workflowId,\n                    status: \"starting\"\n                }\n            });\n            // Use DeepSeek API directly for manual generation\n            const manual = await this.generateManualWithDeepSeek(topic, prompt);\n            // Notify chat system of successful completion\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Manual workflow completed successfully! Generated comprehensive manual for \"${topic}\".`,\n                metadata: {\n                    workflowId,\n                    status: \"completed\"\n                }\n            });\n            // Return structured response with workflow details\n            return {\n                workflow_id: workflowId,\n                status: \"completed\",\n                result: {\n                    data: manual\n                },\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            // Log error for debugging purposes\n            console.error(\"Manual workflow orchestration failed:\", error);\n            // Notify chat system of workflow failure\n            this.addChatMessage({\n                type: \"orchestrator\",\n                content: `Manual workflow failed: ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                metadata: {\n                    workflowId,\n                    status: \"failed\"\n                }\n            });\n            // Re-throw error to be handled by calling code\n            throw error;\n        }\n    }\n    /**\r\n   * Call the actual manual-creator-agent using A2A protocol\r\n   */ async callManualCreatorAgent(topic, prompt) {\n        try {\n            console.log(`📚 Calling manual-creator-agent for topic: ${topic}`);\n            // Call the manual-creator-agent directly\n            const response = await fetch(`${process.env.NEXT_PUBLIC_MANUAL_AGENT_URL || \"http://localhost:4002\"}/api/actions/generate-manual`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    topic: topic,\n                    prompt: prompt\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Manual creator agent responded with status: ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(\"Manual creator agent response:\", result);\n            // Extract the manual data from the response\n            if (result.data && result.data.content) {\n                // The response contains markdown content, parse it\n                const markdownContent = result.data.content;\n                // Extract title from markdown\n                const titleMatch = markdownContent.match(/^# (.+)$/m);\n                const title = titleMatch ? titleMatch[1] : `Manual: ${topic}`;\n                // Extract introduction\n                const introMatch = markdownContent.match(/## Introduction\\n([\\s\\S]*?)(?=\\n## |\\n### |$)/);\n                const introduction = introMatch ? introMatch[1].trim() : `This manual provides comprehensive information about ${topic}`;\n                // Extract sections\n                const sections = [];\n                const sectionRegex = /### Section \\d+: ([^\\n]+)\\n([\\s\\S]*?)(?=\\n### Section |\\n## |$)/g;\n                let sectionMatch;\n                while((sectionMatch = sectionRegex.exec(markdownContent)) !== null){\n                    const sectionTitle = sectionMatch[1].trim();\n                    const sectionContent = sectionMatch[2].trim();\n                    // Extract subsections if any\n                    const subsections = [];\n                    const subsectionRegex = /\\*\\*([^*]+):\\*\\*([^*]+)/g;\n                    let subsectionMatch;\n                    while((subsectionMatch = subsectionRegex.exec(sectionContent)) !== null){\n                        subsections.push({\n                            title: subsectionMatch[1].trim(),\n                            content: subsectionMatch[2].trim()\n                        });\n                    }\n                    sections.push({\n                        title: sectionTitle,\n                        content: sectionContent,\n                        subsections: subsections\n                    });\n                }\n                // Extract conclusion\n                const conclusionMatch = markdownContent.match(/## Collaborative Review\\n([\\s\\S]*?)(?=\\n---|\\*|$)/);\n                const conclusion = conclusionMatch ? conclusionMatch[1].trim() : `This manual has provided comprehensive coverage of ${topic}.`;\n                // Extract glossary and references\n                const glossaryMatch = markdownContent.match(/\\*\\*Glossary:\\*\\*\\n([\\s\\S]*?)(?=\\n\\*\\*References:\\*\\*|$)/);\n                const referencesMatch = markdownContent.match(/\\*\\*References:\\*\\*\\n([\\s\\S]*?)(?=\\n---|\\*|$)/);\n                return {\n                    title: title,\n                    introduction: {\n                        purpose: introduction,\n                        audience: \"General users\",\n                        prerequisites: \"Basic understanding of the topic\"\n                    },\n                    sections: sections.length > 0 ? sections : [\n                        {\n                            title: \"Overview\",\n                            content: `This section provides an overview of ${topic}.`,\n                            subsections: []\n                        },\n                        {\n                            title: \"Getting Started\",\n                            content: `This section covers the basics of ${topic}.`,\n                            subsections: []\n                        },\n                        {\n                            title: \"Advanced Topics\",\n                            content: `This section covers advanced concepts related to ${topic}.`,\n                            subsections: []\n                        }\n                    ],\n                    conclusion: conclusion,\n                    appendix: {\n                        glossary: glossaryMatch ? glossaryMatch[1].trim() : \"Key terms and definitions\",\n                        resources: referencesMatch ? referencesMatch[1].trim() : \"Additional resources and references\"\n                    }\n                };\n            } else {\n                throw new Error(\"Invalid response format from manual creator agent\");\n            }\n        } catch (error) {\n            console.error(\"Error calling manual creator agent:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Generate manual using DeepSeek API\r\n   */ async generateManualWithDeepSeek(topic, prompt) {\n        try {\n            // Import OpenAI dynamically\n            const OpenAI = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/openai\").then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"(rsc)/./node_modules/openai/index.mjs\"))).default;\n            const client = new OpenAI({\n                apiKey: \"sk-6796ea0f38c7499dbf47c7ff2a026966\",\n                baseURL: \"https://api.deepseek.com\"\n            });\n            const completion = await client.chat.completions.create({\n                model: \"deepseek-chat\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `You are an expert technical writer specializing in creating comprehensive manuals and documentation. Create a detailed manual based on the user's request.\r\n\r\nGenerate a comprehensive manual in JSON format:\r\n\r\n{\r\n  \"title\": \"Manual Title\",\r\n  \"introduction\": {\r\n    \"purpose\": \"Purpose of the manual\",\r\n    \"audience\": \"Target audience\",\r\n    \"prerequisites\": \"Required knowledge or skills\"\r\n  },\r\n  \"sections\": [\r\n    {\r\n      \"title\": \"Section Title\",\r\n      \"content\": \"Detailed content for this section\",\r\n      \"subsections\": [\r\n        {\r\n          \"title\": \"Subsection Title\",\r\n          \"content\": \"Subsection content\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"conclusion\": \"Summary and next steps\",\r\n  \"appendix\": {\r\n    \"glossary\": \"Key terms and definitions\",\r\n    \"resources\": \"Additional resources and references\"\r\n  }\r\n}\r\n\r\nREQUIREMENTS:\r\n- Create a comprehensive, well-structured manual\r\n- Include practical examples and step-by-step instructions\r\n- Make content educational and easy to follow\r\n- Organize information logically with clear sections\r\n- Include relevant details and context\r\n- Ensure content is accurate and professional`\n                    },\n                    {\n                        role: \"user\",\n                        content: `Create a comprehensive manual about: ${topic}${prompt ? `\\n\\nAdditional requirements: ${prompt}` : \"\"}`\n                    }\n                ],\n                max_tokens: 4000,\n                temperature: 0.7,\n                stream: false\n            });\n            const response = completion.choices[0]?.message?.content || \"{}\";\n            try {\n                // First try to parse as JSON directly\n                const manualData = JSON.parse(response);\n                return manualData;\n            } catch (parseError) {\n                console.log(\"JSON parsing failed, trying to extract JSON from markdown:\", parseError);\n                // Try to extract JSON from markdown code blocks\n                const jsonMatch = response.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n                if (jsonMatch) {\n                    try {\n                        const extractedJson = jsonMatch[1].trim();\n                        const manualData = JSON.parse(extractedJson);\n                        return manualData;\n                    } catch (extractError) {\n                        console.log(\"Failed to parse extracted JSON:\", extractError);\n                    }\n                }\n                // Try to extract JSON without code block markers\n                const jsonStart = response.indexOf(\"{\");\n                const jsonEnd = response.lastIndexOf(\"}\");\n                if (jsonStart !== -1 && jsonEnd !== -1 && jsonEnd > jsonStart) {\n                    try {\n                        const jsonString = response.substring(jsonStart, jsonEnd + 1);\n                        const manualData = JSON.parse(jsonString);\n                        return manualData;\n                    } catch (extractError) {\n                        console.log(\"Failed to parse extracted JSON string:\", extractError);\n                    }\n                }\n                console.log(\"All JSON extraction attempts failed, processing as markdown content\");\n                // If JSON parsing fails, process the markdown content\n                const markdownContent = response;\n                // Extract title from markdown\n                const titleMatch = markdownContent.match(/^# (.+)$/m);\n                const title = titleMatch ? titleMatch[1] : `Manual: ${topic}`;\n                // Extract introduction\n                const introMatch = markdownContent.match(/## Introduction\\n([\\s\\S]*?)(?=\\n## |\\n### |$)/);\n                const introduction = introMatch ? introMatch[1].trim() : `This manual provides comprehensive information about ${topic}`;\n                // Extract sections\n                const sections = [];\n                const sectionRegex = /### Section \\d+: ([^\\n]+)\\n([\\s\\S]*?)(?=\\n### Section |\\n## |$)/g;\n                let sectionMatch;\n                while((sectionMatch = sectionRegex.exec(markdownContent)) !== null){\n                    const sectionTitle = sectionMatch[1].trim();\n                    const sectionContent = sectionMatch[2].trim();\n                    // Extract subsections if any\n                    const subsections = [];\n                    const subsectionRegex = /\\*\\*([^*]+):\\*\\*([^*]+)/g;\n                    let subsectionMatch;\n                    while((subsectionMatch = subsectionRegex.exec(sectionContent)) !== null){\n                        subsections.push({\n                            title: subsectionMatch[1].trim(),\n                            content: subsectionMatch[2].trim()\n                        });\n                    }\n                    sections.push({\n                        title: sectionTitle,\n                        content: sectionContent,\n                        subsections: subsections\n                    });\n                }\n                // Extract conclusion\n                const conclusionMatch = markdownContent.match(/## Collaborative Review\\n([\\s\\S]*?)(?=\\n---|\\*|$)/);\n                const conclusion = conclusionMatch ? conclusionMatch[1].trim() : `This manual has provided comprehensive coverage of ${topic}.`;\n                // Extract glossary and references\n                const glossaryMatch = markdownContent.match(/\\*\\*Glossary:\\*\\*\\n([\\s\\S]*?)(?=\\n\\*\\*References:\\*\\*|$)/);\n                const referencesMatch = markdownContent.match(/\\*\\*References:\\*\\*\\n([\\s\\S]*?)(?=\\n---|\\*|$)/);\n                return {\n                    title: title,\n                    introduction: {\n                        purpose: introduction,\n                        audience: \"General users\",\n                        prerequisites: \"Basic understanding of the topic\"\n                    },\n                    sections: sections.length > 0 ? sections : [\n                        {\n                            title: \"Overview\",\n                            content: `This section provides an overview of ${topic}.`,\n                            subsections: []\n                        },\n                        {\n                            title: \"Getting Started\",\n                            content: `This section covers the basics of ${topic}.`,\n                            subsections: []\n                        },\n                        {\n                            title: \"Advanced Topics\",\n                            content: `This section covers advanced concepts related to ${topic}.`,\n                            subsections: []\n                        }\n                    ],\n                    conclusion: conclusion,\n                    appendix: {\n                        glossary: glossaryMatch ? glossaryMatch[1].trim() : \"Key terms and definitions\",\n                        resources: referencesMatch ? referencesMatch[1].trim() : \"Additional resources and references\"\n                    }\n                };\n            }\n        } catch (error) {\n            console.error(\"DeepSeek manual generation error:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Execute workflow with chat integration\r\n   */ async executeWorkflowWithChat(workflowId) {\n        const workflow = this.workflows.get(workflowId);\n        if (!workflow) {\n            throw new Error(`Workflow ${workflowId} not found`);\n        }\n        const results = [];\n        for (const step of workflow.steps){\n            try {\n                // Add step start message to chat\n                this.addChatMessage({\n                    type: \"orchestrator\",\n                    content: `Executing step: ${step.skillId} on ${step.agentId}`,\n                    metadata: {\n                        workflowId,\n                        agentId: step.agentId,\n                        skillId: step.skillId,\n                        status: \"running\"\n                    }\n                });\n                // Check dependencies\n                if (step.dependencies) {\n                    const dependencyResults = step.dependencies.map((depId)=>{\n                        const depStep = workflow.steps.find((s)=>s.id === depId);\n                        return depStep?.result;\n                    });\n                    if (dependencyResults.some((r)=>!r)) {\n                        throw new Error(`Dependencies not met for step ${step.id}`);\n                    }\n                }\n                // Execute step\n                step.status = \"running\";\n                const result = await this.executeStep(step);\n                step.result = result;\n                step.status = \"completed\";\n                results.push(result);\n                // Add step completion message to chat\n                this.addChatMessage({\n                    type: \"agent\",\n                    content: `Step completed: ${step.skillId}`,\n                    metadata: {\n                        workflowId,\n                        agentId: step.agentId,\n                        skillId: step.skillId,\n                        status: \"completed\"\n                    }\n                });\n            } catch (error) {\n                step.status = \"failed\";\n                workflow.status = \"failed\";\n                // Add step failure message to chat\n                this.addChatMessage({\n                    type: \"agent\",\n                    content: `Step failed: ${step.skillId} - ${error instanceof Error ? error.message : \"Unknown error\"}`,\n                    metadata: {\n                        workflowId,\n                        agentId: step.agentId,\n                        skillId: step.skillId,\n                        status: \"failed\"\n                    }\n                });\n                throw error;\n            }\n        }\n        workflow.status = \"completed\";\n        workflow.completedAt = new Date();\n        return results;\n    }\n    /**\r\n   * Execute a single workflow step using real A2A SDK with enhanced error handling\r\n   */ async executeStep(step) {\n        const agent = this.agents.get(step.agentId);\n        if (!agent) {\n            throw new Error(`Agent ${step.agentId} not found`);\n        }\n        try {\n            console.log(`🔄 Executing step ${step.id} on agent ${step.agentId}`);\n            // Use direct HTTP call instead of A2A SDK to avoid agent card fetching issues\n            const message = {\n                messageId: (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(),\n                parts: [\n                    {\n                        kind: \"text\",\n                        text: step.input.topic || JSON.stringify({\n                            skillId: step.skillId,\n                            input: step.input\n                        })\n                    }\n                ]\n            };\n            // Send direct HTTP request to backend agent\n            const response = await fetch(`${step.agentId}/a2a/tasks`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    message: message,\n                    configuration: {\n                        blocking: true\n                    }\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(`A2A response for step ${step.id}:`, result);\n            // Handle the response - the backend agent returns the quiz data directly\n            if (result && typeof result === \"object\") {\n                // Extract quiz data from the response\n                let quizData = null;\n                if (result.task && result.task.artifacts) {\n                    // If response has task with artifacts, extract quiz from artifacts\n                    const quizArtifact = result.task.artifacts.find((artifact)=>artifact.name === \"quiz.json\" || artifact.name === \"quiz\");\n                    if (quizArtifact && quizArtifact.parts) {\n                        const quizText = quizArtifact.parts.find((part)=>part.kind === \"text\")?.text;\n                        if (quizText) {\n                            quizData = JSON.parse(quizText);\n                        }\n                    }\n                } else if (result.data) {\n                    // If response has data directly\n                    quizData = result.data;\n                } else if (result.quiz_questions) {\n                    // If response has quiz_questions directly\n                    quizData = result;\n                }\n                if (quizData && quizData.quiz_questions) {\n                    console.log(`✅ Step ${step.id} completed successfully with ${quizData.quiz_questions.length} questions`);\n                    return quizData.quiz_questions;\n                } else {\n                    console.log(`⚠️ Step ${step.id} completed but no quiz data found in response`);\n                    return [];\n                }\n            } else {\n                console.log(`⚠️ Step ${step.id} completed with unexpected response format`);\n                return [];\n            }\n        } catch (error) {\n            console.error(`A2A task execution failed for step ${step.id}:`, error);\n            throw new Error(`A2A agent call failed for step ${step.id}: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    /**\r\n   * Enhanced system health monitoring with circuit breaker status\r\n   */ async monitorSystemHealth(requestData) {\n        const healthChecks = [];\n        const enhancedAgents = this.enhancedAgentSelector.getAllAgents();\n        // Check enhanced agents\n        for (const agent of enhancedAgents){\n            const breakerStatus = this.circuitBreaker.getStatus(agent.id);\n            healthChecks.push({\n                agent: agent.name,\n                url: agent.url,\n                status: agent.status,\n                load: agent.load,\n                reliability: agent.reliability,\n                responseTime: agent.responseTime,\n                circuitBreaker: breakerStatus,\n                lastSeen: agent.lastSeen\n            });\n        }\n        // Check legacy agents\n        const agentEntries = Array.from(this.agents.entries());\n        for(let i = 0; i < agentEntries.length; i++){\n            const [url, agent] = agentEntries[i];\n            // Skip if already checked in enhanced agents\n            if (enhancedAgents.some((ea)=>ea.url === url)) continue;\n            try {\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 3000);\n                const response = await fetch(`${url}/health`, {\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                healthChecks.push({\n                    agent: agent.name,\n                    url: url,\n                    status: \"healthy\",\n                    response_time: response.headers.get(\"x-response-time\") || \"unknown\",\n                    circuitBreaker: null\n                });\n            } catch (error) {\n                healthChecks.push({\n                    agent: agent.name,\n                    url: url,\n                    status: \"unhealthy\",\n                    error: error instanceof Error ? error.message : \"Unknown error\",\n                    circuitBreaker: null\n                });\n            }\n        }\n        const overallHealth = healthChecks.every((h)=>h.status === \"healthy\") ? \"healthy\" : \"degraded\";\n        return {\n            overall_health: overallHealth,\n            agents: healthChecks,\n            circuitBreakers: this.circuitBreaker.getAllStates(),\n            enhanced_metrics: {\n                totalAgents: enhancedAgents.length,\n                onlineAgents: enhancedAgents.filter((a)=>a.status === \"online\").length,\n                averageReliability: enhancedAgents.reduce((sum, a)=>sum + a.reliability, 0) / enhancedAgents.length,\n                averageResponseTime: enhancedAgents.reduce((sum, a)=>sum + a.responseTime, 0) / enhancedAgents.length\n            },\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\r\n   * Add message to chat history\r\n   */ addChatMessage(message) {\n        const chatMessage = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(),\n            timestamp: new Date(),\n            ...message\n        };\n        this.chatHistory.push(chatMessage);\n        return chatMessage;\n    }\n    /**\r\n   * Get chat history\r\n   */ getChatHistory() {\n        return this.chatHistory;\n    }\n    /**\r\n   * Get chat history for a specific workflow\r\n   */ getWorkflowChatHistory(workflowId) {\n        return this.chatHistory.filter((msg)=>msg.metadata?.workflowId === workflowId);\n    }\n    /**\r\n   * Clear chat history\r\n   */ clearChatHistory() {\n        this.chatHistory = [];\n    }\n    /**\r\n   * Get all workflows\r\n   */ getAllWorkflows() {\n        return Array.from(this.workflows.values());\n    }\n    /**\r\n   * Get workflow by ID\r\n   */ getWorkflow(workflowId) {\n        return this.workflows.get(workflowId);\n    }\n    /**\r\n   * Get all agents\r\n   */ getAllAgents() {\n        return Array.from(this.agents.values());\n    }\n    /**\r\n   * Get agent by URL\r\n   */ getAgent(url) {\n        return this.agents.get(url);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/orchestratorService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Forchestrator%2Froute&page=%2Fapi%2Forchestrator%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Forchestrator%2Froute.ts&appDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CChan%20Dra%20Dev%5CAtoA_Protocol%5CA2%5CQuiz%5Cquiz-frontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();