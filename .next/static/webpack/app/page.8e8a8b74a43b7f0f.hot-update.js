"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/enhanced-api-client.ts":
/*!****************************************!*\
  !*** ./src/lib/enhanced-api-client.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuizApiClient: function() { return /* binding */ QuizApiClient; },\n/* harmony export */   quizApiClient: function() { return /* binding */ quizApiClient; }\n/* harmony export */ });\n/* harmony import */ var _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a2a-client-real */ \"(app-pages-browser)/./src/lib/a2a-client-real.ts\");\n/* harmony import */ var _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./orchestrator-client */ \"(app-pages-browser)/./src/lib/orchestrator-client.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:4001\";\nconst ORCHESTRATOR_URL = \"http://localhost:5000\" || 0;\nclass QuizApiClient {\n    async generateQuiz(input) {\n        // Try orchestrator first if enabled (now with A2A protocol)\n        if (this.useOrchestrator) {\n            try {\n                console.log(\"\\uD83C\\uDFAF Using A2A-enabled orchestrator for quiz generation...\");\n                const result = await _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__.orchestratorClient.orchestrateQuizWorkflow({\n                    query: input,\n                    context: {\n                        type: \"quiz_generation\",\n                        difficulty: \"medium\",\n                        questionCount: 20\n                    }\n                });\n                console.log(\"✅ A2A orchestrator workflow completed:\", result);\n                // Extract quiz data from orchestrator result\n                if (result && typeof result === \"object\" && \"result\" in result) {\n                    const resultData = result;\n                    if (resultData.result && resultData.result.data) {\n                        console.log(\"\\uD83C\\uDFAF Quiz data extracted from A2A orchestrator:\", resultData.result.data);\n                        return {\n                            data: resultData.result.data\n                        };\n                    }\n                }\n                // If no data in result, fall through to direct A2A\n                console.log(\"⚠️ No quiz data in A2A orchestrator result, falling back to direct A2A\");\n            } catch (orchestratorError) {\n                console.error(\"❌ A2A orchestrator failed, falling back to direct A2A:\", orchestratorError);\n            }\n        }\n        // Fallback to A2A protocol\n        if (this.useA2A) {\n            try {\n                console.log(\"\\uD83D\\uDD04 Using A2A protocol for quiz generation...\");\n                return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.generateQuiz(input);\n            } catch (a2aError) {\n                console.error(\"A2A quiz generation failed, trying REST API fallback:\", a2aError);\n                // Fallback to REST API\n                try {\n                    const response = await fetch(\"\".concat(this.baseUrl, \"/api/actions/generate-quiz\"), {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            input\n                        })\n                    });\n                    if (!response.ok) {\n                        const errorData = await response.json().catch(()=>({}));\n                        throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n                    }\n                    const result = await response.json();\n                    console.log(\"REST API fallback successful:\", result);\n                    return result;\n                } catch (restError) {\n                    console.error(\"REST API fallback also failed:\", restError);\n                    // Final fallback - return a mock quiz\n                    console.log(\"Using mock quiz as final fallback\");\n                    return this.generateMockQuiz(input);\n                }\n            }\n        } else {\n            // Direct REST API call\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/actions/generate-quiz\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    input\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n            }\n            return response.json();\n        }\n    }\n    async generateQuizWithUsage(input) {\n        if (this.useOrchestrator) {\n            try {\n                console.log(\"\\uD83C\\uDFAF Using A2A orchestrator for quiz generation with usage tracking...\");\n                const result = await _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__.orchestratorClient.executeAgentWithResilience(\"Generate quiz: \".concat(input), {\n                    type: \"quiz_generation_with_usage\",\n                    input\n                });\n                console.log(\"✅ A2A orchestrator execution completed:\", result);\n                const resultData = result;\n                return {\n                    data: resultData.result || {\n                        quiz_questions: []\n                    }\n                };\n            } catch (error) {\n                console.error(\"A2A orchestrator usage tracking failed:\", error);\n            }\n        }\n        if (this.useA2A) {\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.generateQuizWithUsage(input);\n        } else {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/actions/openai\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    input\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n            }\n            return response.json();\n        }\n    }\n    async checkHealth() {\n        if (this.useOrchestrator) {\n            try {\n                console.log(\"\\uD83C\\uDFAF Using A2A orchestrator for health check...\");\n                const health = await _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__.orchestratorClient.monitorSystemHealth();\n                console.log(\"✅ A2A orchestrator health check completed:\", health);\n                const healthData = health;\n                return {\n                    status: healthData.overall_health || healthData.status || \"healthy\",\n                    details: healthData\n                };\n            } catch (error) {\n                console.error(\"A2A orchestrator health check failed:\", error);\n            }\n        }\n        if (this.useA2A) {\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.checkHealth();\n        } else {\n            const response = await fetch(\"\".concat(this.baseUrl, \"/health\"));\n            if (!response.ok) {\n                throw new Error(\"Health check failed! status: \".concat(response.status));\n            }\n            return response.json();\n        }\n    }\n    /**\n   * Get backend agent information via orchestrator\n   */ async getBackendAgentInfo() {\n        if (this.useOrchestrator) {\n            try {\n                const agents = await _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__.orchestratorClient.getAllAgents();\n                return {\n                    agents,\n                    orchestratorUrl: this.orchestratorUrl,\n                    timestamp: new Date().toISOString()\n                };\n            } catch (error) {\n                console.error(\"Failed to get agent info via orchestrator:\", error);\n                throw error;\n            }\n        }\n        if (this.useA2A) {\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.getBackendAgentInfo();\n        } else {\n            throw new Error(\"Agent info only available via orchestrator or A2A protocol\");\n        }\n    }\n    /**\n   * Get available skills from orchestrator\n   */ async getBackendSkills() {\n        if (this.useOrchestrator) {\n            try {\n                const workflows = await _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__.orchestratorClient.getAllWorkflows();\n                return {\n                    workflows,\n                    orchestratorUrl: this.orchestratorUrl,\n                    timestamp: new Date().toISOString()\n                };\n            } catch (error) {\n                console.error(\"Failed to get skills via orchestrator:\", error);\n                throw error;\n            }\n        }\n        if (this.useA2A) {\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.getBackendSkills();\n        } else {\n            throw new Error(\"Skills info only available via orchestrator or A2A protocol\");\n        }\n    }\n    /**\n   * Discover agents via A2A orchestrator\n   */ async discoverAgents() {\n        if (this.useOrchestrator) {\n            try {\n                console.log(\"\\uD83C\\uDFAF Using A2A orchestrator for agent discovery...\");\n                const result = await _orchestrator_client__WEBPACK_IMPORTED_MODULE_1__.orchestratorClient.discoverAgents();\n                console.log(\"✅ A2A orchestrator agent discovery completed:\", result);\n                return result;\n            } catch (error) {\n                console.error(\"Agent discovery via A2A orchestrator failed:\", error);\n                throw error;\n            }\n        }\n        throw new Error(\"Agent discovery only available via A2A orchestrator\");\n    }\n    /**\n   * Switch between orchestrator and direct modes\n   */ setUseOrchestrator(useOrchestrator) {\n        this.useOrchestrator = useOrchestrator;\n    }\n    /**\n   * Switch between A2A and REST modes\n   */ setUseA2A(useA2A) {\n        this.useA2A = useA2A;\n    }\n    /**\n   * Switch between real A2A and simulated A2A modes\n   */ setUseRealA2A(useRealA2A) {\n        this.useRealA2A = useRealA2A;\n    }\n    /**\n   * Generate a mock quiz as final fallback\n   */ generateMockQuiz(input) {\n        return {\n            data: {\n                quiz_questions: [\n                    {\n                        question: \"What is the main topic of: \".concat(input, \"?\"),\n                        correct_answer: \"A\",\n                        answers: [\n                            {\n                                answer: \"The topic mentioned in the question\"\n                            },\n                            {\n                                answer: \"Something completely different\"\n                            },\n                            {\n                                answer: \"A random topic\"\n                            },\n                            {\n                                answer: \"None of the above\"\n                            }\n                        ],\n                        difficulty: \"medium\"\n                    },\n                    {\n                        question: \"Which of the following is most relevant to: \".concat(input, \"?\"),\n                        correct_answer: \"B\",\n                        answers: [\n                            {\n                                answer: \"Option A\"\n                            },\n                            {\n                                answer: \"The most relevant option\"\n                            },\n                            {\n                                answer: \"Option C\"\n                            },\n                            {\n                                answer: \"Option D\"\n                            }\n                        ],\n                        difficulty: \"medium\"\n                    },\n                    {\n                        question: \"True or False: \".concat(input, \" is an important topic.\"),\n                        correct_answer: \"A\",\n                        answers: [\n                            {\n                                answer: \"True\"\n                            },\n                            {\n                                answer: \"False\"\n                            }\n                        ],\n                        difficulty: \"easy\"\n                    }\n                ]\n            }\n        };\n    }\n    constructor(baseUrl = API_BASE_URL, orchestratorUrl = ORCHESTRATOR_URL, useA2A = true, useRealA2A = true, useOrchestrator = true){\n        this.baseUrl = baseUrl;\n        this.orchestratorUrl = orchestratorUrl;\n        this.useA2A = useA2A;\n        this.useRealA2A = useRealA2A;\n        this.useOrchestrator = useOrchestrator;\n    }\n}\nconst quizApiClient = new QuizApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/enhanced-api-client.ts\n"));

/***/ })

});