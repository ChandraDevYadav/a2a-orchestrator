"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/a2a-client-real.ts":
/*!************************************!*\
  !*** ./src/lib/a2a-client-real.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealQuizA2AClient: function() { return /* binding */ RealQuizA2AClient; },\n/* harmony export */   realQuizA2AClient: function() { return /* binding */ realQuizA2AClient; }\n/* harmony export */ });\n/* harmony import */ var _a2a_js_sdk_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @a2a-js/sdk/client */ \"(app-pages-browser)/./node_modules/@a2a-js/sdk/dist/client/index.js\");\n/* __next_internal_client_entry_do_not_use__ RealQuizA2AClient,realQuizA2AClient auto */ \n/**\r\n * Real A2A Client using the official @a2a-js/sdk/client\r\n * Provides proper A2A protocol communication with backend quiz agent\r\n */ class RealQuizA2AClient {\n    /**\r\n   * Initialize A2A client lazily to avoid SSR issues\r\n   */ async getA2AClient() {\n        if (!this.a2aClient) {\n            // Use the recommended fromCardUrl method\n            this.a2aClient = await _a2a_js_sdk_client__WEBPACK_IMPORTED_MODULE_0__.A2AClient.fromCardUrl(\"\".concat(this.backendAgentUrl, \"/.well-known/agent-card.json\"));\n        }\n        return this.a2aClient;\n    }\n    /**\r\n   * Helper method to create a proper A2A message\r\n   */ createMessage(text) {\n        return {\n            message: {\n                kind: \"message\",\n                messageId: \"msg-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n                role: \"user\",\n                parts: [\n                    {\n                        kind: \"text\",\n                        text: text\n                    }\n                ]\n            },\n            configuration: {\n                blocking: true\n            }\n        };\n    }\n    /**\r\n   * Generate quiz using real A2A protocol communication\r\n   */ async generateQuiz(input) {\n        try {\n            console.log(\"Starting real A2A quiz generation...\");\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            // Create A2A message request\n            const messageParams = this.createMessage(\"Generate a quiz based on: \".concat(input));\n            // Send message to backend agent using A2A SDK\n            const response = await a2aClient.sendMessage(messageParams);\n            console.log(\"A2A message sent, response:\", response);\n            // Handle the response based on its type\n            if (\"task\" in response && response.task && typeof response.task === \"object\") {\n                var _completedTask_status, _completedTask_status1, _completedTask_status2, _completedTask_status3;\n                // If it's a task, wait for completion\n                const task = response.task;\n                console.log(\"A2A task created:\", task.id);\n                // Poll for task completion with timeout\n                let completedTask = task;\n                let attempts = 0;\n                const maxAttempts = 30; // 30 seconds timeout\n                while(completedTask.status && (completedTask.status.state === \"running\" || completedTask.status.state === \"submitted\") && attempts < maxAttempts){\n                    await new Promise((resolve)=>setTimeout(resolve, 1000)); // Wait 1 second\n                    attempts++;\n                    try {\n                        const taskResponse = await a2aClient.getTask({\n                            id: task.id\n                        });\n                        console.log(\"A2A task polling attempt \".concat(attempts, \":\"), taskResponse);\n                        if (\"task\" in taskResponse && taskResponse.task) {\n                            var _completedTask_status4;\n                            completedTask = taskResponse.task;\n                            console.log(\"A2A task status: \".concat((_completedTask_status4 = completedTask.status) === null || _completedTask_status4 === void 0 ? void 0 : _completedTask_status4.state));\n                        }\n                    } catch (pollError) {\n                        console.error(\"A2A task polling error (attempt \".concat(attempts, \"):\"), pollError);\n                    }\n                }\n                if (attempts >= maxAttempts) {\n                    throw new Error(\"A2A task polling timeout - task did not complete within 30 seconds\");\n                }\n                console.log(\"A2A task completed:\", (_completedTask_status = completedTask.status) === null || _completedTask_status === void 0 ? void 0 : _completedTask_status.state);\n                console.log(\"A2A task final status:\", (_completedTask_status1 = completedTask.status) === null || _completedTask_status1 === void 0 ? void 0 : _completedTask_status1.state);\n                console.log(\"A2A task artifacts:\", completedTask.artifacts);\n                if (((_completedTask_status2 = completedTask.status) === null || _completedTask_status2 === void 0 ? void 0 : _completedTask_status2.state) === \"completed\" && completedTask.artifacts) {\n                    // Extract quiz data from A2A artifacts\n                    const quizArtifact = completedTask.artifacts.find((artifact)=>artifact.name === \"quiz.json\");\n                    console.log(\"A2A quiz artifact found:\", quizArtifact);\n                    if (quizArtifact && quizArtifact.parts) {\n                        try {\n                            const quizData = JSON.parse(quizArtifact.parts[0].text);\n                            console.log(\"A2A quiz data parsed successfully:\", quizData);\n                            return {\n                                data: quizData\n                            };\n                        } catch (parseError) {\n                            console.error(\"A2A quiz data parsing failed:\", parseError);\n                            console.log(\"Raw artifact text:\", quizArtifact.parts[0].text);\n                            throw new Error(\"Failed to parse quiz data from A2A artifact\");\n                        }\n                    } else {\n                        console.error(\"A2A quiz artifact missing or invalid:\", quizArtifact);\n                        throw new Error(\"Quiz artifact is missing or has no parts\");\n                    }\n                } else if (((_completedTask_status3 = completedTask.status) === null || _completedTask_status3 === void 0 ? void 0 : _completedTask_status3.state) === \"failed\") {\n                    console.error(\"A2A task failed:\", completedTask);\n                    throw new Error(\"A2A task execution failed\");\n                } else {\n                    var _completedTask_status5;\n                    console.error(\"A2A task not completed or no artifacts:\", completedTask);\n                    throw new Error(\"A2A task status: \".concat((_completedTask_status5 = completedTask.status) === null || _completedTask_status5 === void 0 ? void 0 : _completedTask_status5.state, \", artifacts: \").concat(completedTask.artifacts ? \"present\" : \"missing\"));\n                }\n            } else if (\"message\" in response && response.message && typeof response.message === \"object\") {\n                // If it's a direct message response, try to extract quiz data\n                const message = response.message;\n                if (message.parts && message.parts.length > 0) {\n                    try {\n                        const quizData = JSON.parse(message.parts[0].text);\n                        return {\n                            data: quizData\n                        };\n                    } catch (e) {\n                        // If not JSON, treat as text response\n                        return {\n                            data: {\n                                quiz_questions: [\n                                    {\n                                        question: message.parts[0].text,\n                                        answers: [],\n                                        correct_answer: \"\"\n                                    }\n                                ]\n                            }\n                        };\n                    }\n                }\n            }\n            throw new Error(\"No valid quiz data received from A2A agent\");\n        } catch (error) {\n            console.error(\"A2A quiz generation failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Generate quiz with usage tracking using A2A protocol\r\n   */ async generateQuizWithUsage(input) {\n        // Use the same method as generateQuiz since A2A SDK handles task tracking\n        return this.generateQuiz(input);\n    }\n    /**\r\n   * Submit a custom task to the backend agent using A2A SDK\r\n   */ async submitCustomTask(skillId, input) {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(JSON.stringify({\n                skillId,\n                input\n            }));\n            const response = await a2aClient.sendMessage(messageParams);\n            // Handle response - simplified for custom tasks\n            if (\"task\" in response && response.task) {\n                return response.task;\n            } else if (\"message\" in response && response.message) {\n                return response.message;\n            }\n            throw new Error(\"No valid response received from A2A agent\");\n        } catch (error) {\n            console.error(\"A2A custom task submission failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Check health of backend agent using A2A protocol\r\n   */ async checkHealth() {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(\"health check\");\n            const response = await a2aClient.sendMessage(messageParams);\n            return {\n                status: \"healthy\",\n                response: response,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"A2A health check failed:\", error);\n            return {\n                status: \"unhealthy\",\n                error: error instanceof Error ? error.message : \"Unknown error\",\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    /**\r\n   * Get backend agent information using A2A protocol\r\n   */ async getBackendAgentInfo() {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(\"get agent info\");\n            const response = await a2aClient.sendMessage(messageParams);\n            return {\n                agentUrl: this.backendAgentUrl,\n                response: response,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"A2A agent info request failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get backend agent skills using A2A protocol\r\n   */ async getBackendSkills() {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(\"get skills\");\n            const response = await a2aClient.sendMessage(messageParams);\n            return {\n                skills: response,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Failed to get backend skills:\", error);\n            throw error;\n        }\n    }\n    constructor(backendAgentUrl = \"http://localhost:4001\"){\n        this.a2aClient = null;\n        this.backendAgentUrl = backendAgentUrl;\n    }\n}\n// Export singleton instance\nconst realQuizA2AClient = new RealQuizA2AClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/a2a-client-real.ts\n"));

/***/ })

});