"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/a2a-client-real.ts":
/*!************************************!*\
  !*** ./src/lib/a2a-client-real.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RealQuizA2AClient: function() { return /* binding */ RealQuizA2AClient; },\n/* harmony export */   realQuizA2AClient: function() { return /* binding */ realQuizA2AClient; }\n/* harmony export */ });\n/* harmony import */ var _a2a_js_sdk_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @a2a-js/sdk/client */ \"(app-pages-browser)/./node_modules/@a2a-js/sdk/dist/client/index.js\");\n/* __next_internal_client_entry_do_not_use__ RealQuizA2AClient,realQuizA2AClient auto */ \n/**\r\n * Real A2A Client using the official @a2a-js/sdk/client\r\n * Provides proper A2A protocol communication with backend quiz agent\r\n */ class RealQuizA2AClient {\n    /**\r\n   * Initialize A2A client lazily to avoid SSR issues\r\n   */ async getA2AClient() {\n        if (!this.a2aClient) {\n            // Use the recommended fromCardUrl method\n            this.a2aClient = await _a2a_js_sdk_client__WEBPACK_IMPORTED_MODULE_0__.A2AClient.fromCardUrl(\"\".concat(this.backendAgentUrl, \"/.well-known/agent-card.json\"));\n        }\n        return this.a2aClient;\n    }\n    /**\r\n   * Helper method to create a proper A2A message\r\n   */ createMessage(text) {\n        return {\n            message: {\n                kind: \"message\",\n                messageId: \"msg-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n                role: \"user\",\n                parts: [\n                    {\n                        kind: \"text\",\n                        text: text\n                    }\n                ]\n            },\n            configuration: {\n                blocking: true\n            }\n        };\n    }\n    /**\r\n   * Generate quiz using real A2A protocol communication\r\n   */ async generateQuiz(input) {\n        try {\n            console.log(\"Starting real A2A quiz generation...\");\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            // Create A2A message request\n            const messageParams = this.createMessage(\"Generate a quiz based on: \".concat(input));\n            // Send message to backend agent using A2A SDK\n            const response = await a2aClient.sendMessage(messageParams);\n            console.log(\"A2A message sent, response:\", response);\n            // Handle the response based on its type\n            if (\"task\" in response && response.task && typeof response.task === \"object\") {\n                var _completedTask_status, _completedTask_status1, _completedTask_status2, _completedTask_status3;\n                // If it's a task, wait for completion\n                const task = response.task;\n                console.log(\"A2A task created:\", task.id);\n                // Poll for task completion with timeout\n                let completedTask = task;\n                let attempts = 0;\n                const maxAttempts = 30; // 30 seconds timeout\n                while(completedTask.status && (completedTask.status.state === \"running\" || completedTask.status.state === \"submitted\") && attempts < maxAttempts){\n                    await new Promise((resolve)=>setTimeout(resolve, 1000)); // Wait 1 second\n                    attempts++;\n                    try {\n                        const taskResponse = await a2aClient.getTask({\n                            id: task.id\n                        });\n                        console.log(\"A2A task polling attempt \".concat(attempts, \":\"), taskResponse);\n                        if (\"task\" in taskResponse && taskResponse.task) {\n                            var _completedTask_status4;\n                            completedTask = taskResponse.task;\n                            console.log(\"A2A task status: \".concat((_completedTask_status4 = completedTask.status) === null || _completedTask_status4 === void 0 ? void 0 : _completedTask_status4.state));\n                        }\n                    } catch (pollError) {\n                        console.error(\"A2A task polling error (attempt \".concat(attempts, \"):\"), pollError);\n                    }\n                }\n                if (attempts >= maxAttempts) {\n                    throw new Error(\"A2A task polling timeout - task did not complete within 30 seconds\");\n                }\n                console.log(\"A2A task completed:\", (_completedTask_status = completedTask.status) === null || _completedTask_status === void 0 ? void 0 : _completedTask_status.state);\n                console.log(\"A2A task final status:\", (_completedTask_status1 = completedTask.status) === null || _completedTask_status1 === void 0 ? void 0 : _completedTask_status1.state);\n                console.log(\"A2A task artifacts:\", completedTask.artifacts);\n                if (((_completedTask_status2 = completedTask.status) === null || _completedTask_status2 === void 0 ? void 0 : _completedTask_status2.state) === \"completed\" && completedTask.artifacts) {\n                    // Extract quiz data from A2A artifacts\n                    const quizArtifact = completedTask.artifacts.find((artifact)=>artifact.name === \"quiz.json\");\n                    console.log(\"A2A quiz artifact found:\", quizArtifact);\n                    if (quizArtifact && quizArtifact.parts) {\n                        try {\n                            const quizData = JSON.parse(quizArtifact.parts[0].text);\n                            console.log(\"A2A quiz data parsed successfully:\", quizData);\n                            return {\n                                data: quizData\n                            };\n                        } catch (parseError) {\n                            console.error(\"A2A quiz data parsing failed:\", parseError);\n                            console.log(\"Raw artifact text:\", quizArtifact.parts[0].text);\n                            throw new Error(\"Failed to parse quiz data from A2A artifact\");\n                        }\n                    } else {\n                        console.error(\"A2A quiz artifact missing or invalid:\", quizArtifact);\n                        throw new Error(\"Quiz artifact is missing or has no parts\");\n                    }\n                } else if (((_completedTask_status3 = completedTask.status) === null || _completedTask_status3 === void 0 ? void 0 : _completedTask_status3.state) === \"failed\") {\n                    console.error(\"A2A task failed:\", completedTask);\n                    throw new Error(\"A2A task execution failed\");\n                } else {\n                    var _completedTask_status5;\n                    console.error(\"A2A task not completed or no artifacts:\", completedTask);\n                    throw new Error(\"A2A task status: \".concat((_completedTask_status5 = completedTask.status) === null || _completedTask_status5 === void 0 ? void 0 : _completedTask_status5.state, \", artifacts: \").concat(completedTask.artifacts ? \"present\" : \"missing\"));\n                }\n            } else if (\"message\" in response && response.message && typeof response.message === \"object\") {\n                // If it's a direct message response, try to extract quiz data\n                const message = response.message;\n                if (message.parts && message.parts.length > 0) {\n                    try {\n                        const quizData = JSON.parse(message.parts[0].text);\n                        return {\n                            data: quizData\n                        };\n                    } catch (e) {\n                        // If not JSON, treat as text response\n                        return {\n                            data: {\n                                quiz_questions: [\n                                    {\n                                        question: message.parts[0].text,\n                                        answers: [],\n                                        correct_answer: \"\"\n                                    }\n                                ]\n                            }\n                        };\n                    }\n                }\n            }\n            throw new Error(\"No valid quiz data received from A2A agent\");\n        } catch (error) {\n            console.error(\"A2A quiz generation failed:\", error);\n            console.log(\"Falling back to REST API...\");\n            // Fallback to REST API\n            try {\n                return await this.fallbackGenerateQuiz(input);\n            } catch (fallbackError) {\n                console.error(\"REST API fallback also failed:\", fallbackError);\n                throw new Error(\"Both A2A and REST API failed. A2A error: \".concat(error instanceof Error ? error.message : \"Unknown error\", \". REST error: \").concat(fallbackError instanceof Error ? fallbackError.message : \"Unknown error\"));\n            }\n        }\n    }\n    /**\r\n   * Generate quiz with usage tracking using A2A protocol\r\n   */ async generateQuizWithUsage(input) {\n        // Use the same method as generateQuiz since A2A SDK handles task tracking\n        return this.generateQuiz(input);\n    }\n    /**\r\n   * Submit a custom task to the backend agent using A2A SDK\r\n   */ async submitCustomTask(skillId, input) {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(JSON.stringify({\n                skillId,\n                input\n            }));\n            const response = await a2aClient.sendMessage(messageParams);\n            // Handle response - simplified for custom tasks\n            if (\"task\" in response && response.task) {\n                return response.task;\n            } else if (\"message\" in response && response.message) {\n                return response.message;\n            }\n            throw new Error(\"No valid response received from A2A agent\");\n        } catch (error) {\n            console.error(\"A2A custom task submission failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Fallback method to generate quiz using REST API\r\n   */ async fallbackGenerateQuiz(input) {\n        try {\n            console.log(\"Using REST API fallback for quiz generation...\");\n            const response = await fetch(\"\".concat(this.backendAgentUrl, \"/api/actions/generate-quiz\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    input\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n            }\n            const result = await response.json();\n            console.log(\"REST API quiz generation successful:\", result);\n            return result;\n        } catch (error) {\n            console.error(\"REST API fallback failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Check health of backend agent using A2A protocol\r\n   */ async checkHealth() {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(\"health check\");\n            const response = await a2aClient.sendMessage(messageParams);\n            return {\n                status: \"healthy\",\n                response: response,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"A2A health check failed:\", error);\n            return {\n                status: \"unhealthy\",\n                error: error instanceof Error ? error.message : \"Unknown error\",\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    /**\r\n   * Get backend agent information using A2A protocol\r\n   */ async getBackendAgentInfo() {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(\"get agent info\");\n            const response = await a2aClient.sendMessage(messageParams);\n            return {\n                agentUrl: this.backendAgentUrl,\n                response: response,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"A2A agent info request failed:\", error);\n            throw error;\n        }\n    }\n    /**\r\n   * Get backend agent skills using A2A protocol\r\n   */ async getBackendSkills() {\n        try {\n            // Get A2A client\n            const a2aClient = await this.getA2AClient();\n            const messageParams = this.createMessage(\"get skills\");\n            const response = await a2aClient.sendMessage(messageParams);\n            return {\n                skills: response,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error(\"Failed to get backend skills:\", error);\n            throw error;\n        }\n    }\n    constructor(backendAgentUrl = \"http://localhost:4001\"){\n        this.a2aClient = null;\n        this.backendAgentUrl = backendAgentUrl;\n    }\n}\n// Export singleton instance\nconst realQuizA2AClient = new RealQuizA2AClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYTJhLWNsaWVudC1yZWFsLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozt5RkFPK0M7QUFPL0M7OztDQUdDLEdBQ00sTUFBTUM7SUFRWDs7R0FFQyxHQUNELE1BQWNDLGVBQW1DO1FBQy9DLElBQUksQ0FBQyxJQUFJLENBQUNDLFNBQVMsRUFBRTtZQUNuQix5Q0FBeUM7WUFDekMsSUFBSSxDQUFDQSxTQUFTLEdBQUcsTUFBTUgseURBQVNBLENBQUNJLFdBQVcsQ0FDMUMsR0FBd0IsT0FBckIsSUFBSSxDQUFDQyxlQUFlLEVBQUM7UUFFNUI7UUFDQSxPQUFPLElBQUksQ0FBQ0YsU0FBUztJQUN2QjtJQUVBOztHQUVDLEdBQ0QsY0FBc0JJLElBQVksRUFBcUI7UUFDckQsT0FBTztZQUNMQyxTQUFTO2dCQUNQQyxNQUFNO2dCQUNOQyxXQUFXLE9BQXFCQyxPQUFkQyxLQUFLQyxHQUFHLElBQUcsS0FFYixPQUZnQkYsS0FBS0csTUFBTSxHQUN4Q0MsUUFBUSxDQUFDLElBQ1RDLE1BQU0sQ0FBQyxHQUFHO2dCQUNiQyxNQUFNO2dCQUNOQyxPQUFPO29CQUNMO3dCQUNFVCxNQUFNO3dCQUNORixNQUFNQTtvQkFDUjtpQkFDRDtZQUNIO1lBQ0FZLGVBQWU7Z0JBQ2JDLFVBQVU7WUFDWjtRQUNGO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE1BQU1DLGFBQWFDLEtBQWEsRUFBbUM7UUFDakUsSUFBSTtZQUNGQyxRQUFRQyxHQUFHLENBQUM7WUFFWixpQkFBaUI7WUFDakIsTUFBTXJCLFlBQVksTUFBTSxJQUFJLENBQUNELFlBQVk7WUFFekMsNkJBQTZCO1lBQzdCLE1BQU11QixnQkFBZ0IsSUFBSSxDQUFDbkIsYUFBYSxDQUN0Qyw2QkFBbUMsT0FBTmdCO1lBRy9CLDhDQUE4QztZQUM5QyxNQUFNSSxXQUFnQyxNQUFNdkIsVUFBVXdCLFdBQVcsQ0FDL0RGO1lBRUZGLFFBQVFDLEdBQUcsQ0FBQywrQkFBK0JFO1lBRTNDLHdDQUF3QztZ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LGlCQUFpQjtZQUNqQixNQUFNMUUsWUFBWSxNQUFNLElBQUksQ0FBQ0QsWUFBWTtZQUV6QyxNQUFNdUIsZ0JBQWdCLElBQUksQ0FBQ25CLGFBQWEsQ0FBQztZQUV6QyxNQUFNb0IsV0FBZ0MsTUFBTXZCLFVBQVV3QixXQUFXLENBQy9ERjtZQUdGLE9BQU87Z0JBQ0xxRCxVQUFVLElBQUksQ0FBQ3pFLGVBQWU7Z0JBQzlCcUIsVUFBVUE7Z0JBQ1ZpRCxXQUFXLElBQUkvRCxPQUFPZ0UsV0FBVztZQUNuQztRQUNGLEVBQUUsT0FBT25DLE9BQU87WUFDZGxCLFFBQVFrQixLQUFLLENBQUMsa0NBQWtDQTtZQUNoRCxNQUFNQTtRQUNSO0lBQ0Y7SUFFQTs7R0FFQyxHQUNELE1BQU1zQyxtQkFBaUM7UUFDckMsSUFBSTtZQUNGLGlCQUFpQjtZQUNqQixNQUFNNUUsWUFBWSxNQUFNLElBQUksQ0FBQ0QsWUFBWTtZQUV6QyxNQUFNdUIsZ0JBQWdCLElBQUksQ0FBQ25CLGFBQWEsQ0FBQztZQUV6QyxNQUFNb0IsV0FBZ0MsTUFBTXZCLFVBQVV3QixXQUFXLENBQy9ERjtZQUdGLE9BQU87Z0JBQ0x1RCxRQUFRdEQ7Z0JBQ1JpRCxXQUFXLElBQUkvRCxPQUFPZ0UsV0FBVztZQUNuQztRQUNGLEVBQUUsT0FBT25DLE9BQU87WUFDZGxCLFFBQVFrQixLQUFLLENBQUMsaUNBQWlDQTtZQUMvQyxNQUFNQTtRQUNSO0lBQ0Y7SUF4V0F3QyxZQUFZNUUsa0JBQTBCLHVCQUF1QixDQUFFO2FBSHZERixZQUE4QjtRQUlwQyxJQUFJLENBQUNFLGVBQWUsR0FBR0E7SUFDekI7QUF1V0Y7QUFFQSw0QkFBNEI7QUFDckIsTUFBTTZFLG9CQUFvQixJQUFJakYsb0JBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvYTJhLWNsaWVudC1yZWFsLnRzPzBiMWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XHJcblxyXG5pbXBvcnQge1xyXG4gIFF1aXpEYXRhLFxyXG4gIFF1aXpHZW5lcmF0aW9uUmVxdWVzdCxcclxuICBRdWl6R2VuZXJhdGlvblJlc3BvbnNlLFxyXG59IGZyb20gXCJAL3R5cGVzL3F1aXpcIjtcclxuaW1wb3J0IHsgQTJBQ2xpZW50IH0gZnJvbSBcIkBhMmEtanMvc2RrL2NsaWVudFwiO1xyXG5pbXBvcnQge1xyXG4gIE1lc3NhZ2VTZW5kUGFyYW1zLFxyXG4gIFNlbmRNZXNzYWdlUmVzcG9uc2UsXHJcbiAgVGFza1F1ZXJ5UGFyYW1zLFxyXG59IGZyb20gXCJAYTJhLWpzL3Nka1wiO1xyXG5cclxuLyoqXHJcbiAqIFJlYWwgQTJBIENsaWVudCB1c2luZyB0aGUgb2ZmaWNpYWwgQGEyYS1qcy9zZGsvY2xpZW50XHJcbiAqIFByb3ZpZGVzIHByb3BlciBBMkEgcHJvdG9jb2wgY29tbXVuaWNhdGlvbiB3aXRoIGJhY2tlbmQgcXVpeiBhZ2VudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlYWxRdWl6QTJBQ2xpZW50IHtcclxuICBwcml2YXRlIGEyYUNsaWVudDogQTJBQ2xpZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBiYWNrZW5kQWdlbnRVcmw6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoYmFja2VuZEFnZW50VXJsOiBzdHJpbmcgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6NDAwMVwiKSB7XHJcbiAgICB0aGlzLmJhY2tlbmRBZ2VudFVybCA9IGJhY2tlbmRBZ2VudFVybDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgQTJBIGNsaWVudCBsYXppbHkgdG8gYXZvaWQgU1NSIGlzc3Vlc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZ2V0QTJBQ2xpZW50KCk6IFByb21pc2U8QTJBQ2xpZW50PiB7XHJcbiAgICBpZiAoIXRoaXMuYTJhQ2xpZW50KSB7XHJcbiAgICAgIC8vIFVzZSB0aGUgcmVjb21tZW5kZWQgZnJvbUNhcmRVcmwgbWV0aG9kXHJcbiAgICAgIHRoaXMuYTJhQ2xpZW50ID0gYXdhaXQgQTJBQ2xpZW50LmZyb21DYXJkVXJsKFxyXG4gICAgICAgIGAke3RoaXMuYmFja2VuZEFnZW50VXJsfS8ud2VsbC1rbm93bi9hZ2VudC1jYXJkLmpzb25gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5hMmFDbGllbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGNyZWF0ZSBhIHByb3BlciBBMkEgbWVzc2FnZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlTWVzc2FnZSh0ZXh0OiBzdHJpbmcpOiBNZXNzYWdlU2VuZFBhcmFtcyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtZXNzYWdlOiB7XHJcbiAgICAgICAga2luZDogXCJtZXNzYWdlXCIsXHJcbiAgICAgICAgbWVzc2FnZUlkOiBgbXNnLSR7RGF0ZS5ub3coKX0tJHtNYXRoLnJhbmRvbSgpXHJcbiAgICAgICAgICAudG9TdHJpbmcoMzYpXHJcbiAgICAgICAgICAuc3Vic3RyKDIsIDkpfWAsXHJcbiAgICAgICAgcm9sZTogXCJ1c2VyXCIsXHJcbiAgICAgICAgcGFydHM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAga2luZDogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbmZpZ3VyYXRpb246IHtcclxuICAgICAgICBibG9ja2luZzogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZW5lcmF0ZSBxdWl6IHVzaW5nIHJlYWwgQTJBIHByb3RvY29sIGNvbW11bmljYXRpb25cclxuICAgKi9cclxuICBhc3luYyBnZW5lcmF0ZVF1aXooaW5wdXQ6IHN0cmluZyk6IFByb21pc2U8UXVpekdlbmVyYXRpb25SZXNwb25zZT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coXCJTdGFydGluZyByZWFsIEEyQSBxdWl6IGdlbmVyYXRpb24uLi5cIik7XHJcblxyXG4gICAgICAvLyBHZXQgQTJBIGNsaWVudFxyXG4gICAgICBjb25zdCBhMmFDbGllbnQgPSBhd2FpdCB0aGlzLmdldEEyQUNsaWVudCgpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIEEyQSBtZXNzYWdlIHJlcXVlc3RcclxuICAgICAgY29uc3QgbWVzc2FnZVBhcmFtcyA9IHRoaXMuY3JlYXRlTWVzc2FnZShcclxuICAgICAgICBgR2VuZXJhdGUgYSBxdWl6IGJhc2VkIG9uOiAke2lucHV0fWBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIFNlbmQgbWVzc2FnZSB0byBiYWNrZW5kIGFnZW50IHVzaW5nIEEyQSBTREtcclxuICAgICAgY29uc3QgcmVzcG9uc2U6IFNlbmRNZXNzYWdlUmVzcG9uc2UgPSBhd2FpdCBhMmFDbGllbnQuc2VuZE1lc3NhZ2UoXHJcbiAgICAgICAgbWVzc2FnZVBhcmFtc1xyXG4gICAgICApO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkEyQSBtZXNzYWdlIHNlbnQsIHJlc3BvbnNlOlwiLCByZXNwb25zZSk7XHJcblxyXG4gICAgICAvLyBIYW5kbGUgdGhlIHJlc3BvbnNlIGJhc2VkIG9uIGl0cyB0eXBlXHJcbiAgICAgIGlmIChcclxuICAgICAgICBcInRhc2tcIiBpbiByZXNwb25zZSAmJlxyXG4gICAgICAgIHJlc3BvbnNlLnRhc2sgJiZcclxuICAgICAgICB0eXBlb2YgcmVzcG9uc2UudGFzayA9PT0gXCJvYmplY3RcIlxyXG4gICAgICApIHtcclxuICAgICAgICAvLyBJZiBpdCdzIGEgdGFzaywgd2FpdCBmb3IgY29tcGxldGlvblxyXG4gICAgICAgIGNvbnN0IHRhc2sgPSByZXNwb25zZS50YXNrIGFzIGFueTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkEyQSB0YXNrIGNyZWF0ZWQ6XCIsIHRhc2suaWQpO1xyXG5cclxuICAgICAgICAvLyBQb2xsIGZvciB0YXNrIGNvbXBsZXRpb24gd2l0aCB0aW1lb3V0XHJcbiAgICAgICAgbGV0IGNvbXBsZXRlZFRhc2sgPSB0YXNrO1xyXG4gICAgICAgIGxldCBhdHRlbXB0cyA9IDA7XHJcbiAgICAgICAgY29uc3QgbWF4QXR0ZW1wdHMgPSAzMDsgLy8gMzAgc2Vjb25kcyB0aW1lb3V0XHJcblxyXG4gICAgICAgIHdoaWxlIChcclxuICAgICAgICAgIGNvbXBsZXRlZFRhc2suc3RhdHVzICYmXHJcbiAgICAgICAgICAoY29tcGxldGVkVGFzay5zdGF0dXMuc3RhdGUgPT09IFwicnVubmluZ1wiIHx8XHJcbiAgICAgICAgICAgIGNvbXBsZXRlZFRhc2suc3RhdHVzLnN0YXRlID09PSBcInN1Ym1pdHRlZFwiKSAmJlxyXG4gICAgICAgICAgYXR0ZW1wdHMgPCBtYXhBdHRlbXB0c1xyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpOyAvLyBXYWl0IDEgc2Vjb25kXHJcbiAgICAgICAgICBhdHRlbXB0cysrO1xyXG5cclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhc2tSZXNwb25zZSA9IGF3YWl0IGEyYUNsaWVudC5nZXRUYXNrKHsgaWQ6IHRhc2suaWQgfSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBMkEgdGFzayBwb2xsaW5nIGF0dGVtcHQgJHthdHRlbXB0c306YCwgdGFza1Jlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChcInRhc2tcIiBpbiB0YXNrUmVzcG9uc2UgJiYgdGFza1Jlc3BvbnNlLnRhc2spIHtcclxuICAgICAgICAgICAgICBjb21wbGV0ZWRUYXNrID0gdGFza1Jlc3BvbnNlLnRhc2sgYXMgYW55O1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBMkEgdGFzayBzdGF0dXM6ICR7Y29tcGxldGVkVGFzay5zdGF0dXM/LnN0YXRlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChwb2xsRXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICBgQTJBIHRhc2sgcG9sbGluZyBlcnJvciAoYXR0ZW1wdCAke2F0dGVtcHRzfSk6YCxcclxuICAgICAgICAgICAgICBwb2xsRXJyb3JcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhdHRlbXB0cyA+PSBtYXhBdHRlbXB0cykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICBcIkEyQSB0YXNrIHBvbGxpbmcgdGltZW91dCAtIHRhc2sgZGlkIG5vdCBjb21wbGV0ZSB3aXRoaW4gMzAgc2Vjb25kc1wiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJBMkEgdGFzayBjb21wbGV0ZWQ6XCIsIGNvbXBsZXRlZFRhc2suc3RhdHVzPy5zdGF0ZSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQTJBIHRhc2sgZmluYWwgc3RhdHVzOlwiLCBjb21wbGV0ZWRUYXNrLnN0YXR1cz8uc3RhdGUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQTJBIHRhc2sgYXJ0aWZhY3RzOlwiLCBjb21wbGV0ZWRUYXNrLmFydGlmYWN0cyk7XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNvbXBsZXRlZFRhc2suc3RhdHVzPy5zdGF0ZSA9PT0gXCJjb21wbGV0ZWRcIiAmJlxyXG4gICAgICAgICAgY29tcGxldGVkVGFzay5hcnRpZmFjdHNcclxuICAgICAgICApIHtcclxuICAgICAgICAgIC8vIEV4dHJhY3QgcXVpeiBkYXRhIGZyb20gQTJBIGFydGlmYWN0c1xyXG4gICAgICAgICAgY29uc3QgcXVpekFydGlmYWN0ID0gY29tcGxldGVkVGFzay5hcnRpZmFjdHMuZmluZChcclxuICAgICAgICAgICAgKGFydGlmYWN0OiBhbnkpID0+IGFydGlmYWN0Lm5hbWUgPT09IFwicXVpei5qc29uXCJcclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJBMkEgcXVpeiBhcnRpZmFjdCBmb3VuZDpcIiwgcXVpekFydGlmYWN0KTtcclxuXHJcbiAgICAgICAgICBpZiAocXVpekFydGlmYWN0ICYmIHF1aXpBcnRpZmFjdC5wYXJ0cykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHF1aXpEYXRhID0gSlNPTi5wYXJzZShxdWl6QXJ0aWZhY3QucGFydHNbMF0udGV4dCk7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJBMkEgcXVpeiBkYXRhIHBhcnNlZCBzdWNjZXNzZnVsbHk6XCIsIHF1aXpEYXRhKTtcclxuICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZGF0YTogcXVpekRhdGEsXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBMkEgcXVpeiBkYXRhIHBhcnNpbmcgZmFpbGVkOlwiLCBwYXJzZUVycm9yKTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJhdyBhcnRpZmFjdCB0ZXh0OlwiLCBxdWl6QXJ0aWZhY3QucGFydHNbMF0udGV4dCk7XHJcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIHF1aXogZGF0YSBmcm9tIEEyQSBhcnRpZmFjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICBcIkEyQSBxdWl6IGFydGlmYWN0IG1pc3Npbmcgb3IgaW52YWxpZDpcIixcclxuICAgICAgICAgICAgICBxdWl6QXJ0aWZhY3RcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUXVpeiBhcnRpZmFjdCBpcyBtaXNzaW5nIG9yIGhhcyBubyBwYXJ0c1wiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGNvbXBsZXRlZFRhc2suc3RhdHVzPy5zdGF0ZSA9PT0gXCJmYWlsZWRcIikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkEyQSB0YXNrIGZhaWxlZDpcIiwgY29tcGxldGVkVGFzayk7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBMkEgdGFzayBleGVjdXRpb24gZmFpbGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBcIkEyQSB0YXNrIG5vdCBjb21wbGV0ZWQgb3Igbm8gYXJ0aWZhY3RzOlwiLFxyXG4gICAgICAgICAgICBjb21wbGV0ZWRUYXNrXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICBgQTJBIHRhc2sgc3RhdHVzOiAke2NvbXBsZXRlZFRhc2suc3RhdHVzPy5zdGF0ZX0sIGFydGlmYWN0czogJHtcclxuICAgICAgICAgICAgICBjb21wbGV0ZWRUYXNrLmFydGlmYWN0cyA/IFwicHJlc2VudFwiIDogXCJtaXNzaW5nXCJcclxuICAgICAgICAgICAgfWBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIFwibWVzc2FnZVwiIGluIHJlc3BvbnNlICYmXHJcbiAgICAgICAgcmVzcG9uc2UubWVzc2FnZSAmJlxyXG4gICAgICAgIHR5cGVvZiByZXNwb25zZS5tZXNzYWdlID09PSBcIm9iamVjdFwiXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vIElmIGl0J3MgYSBkaXJlY3QgbWVzc2FnZSByZXNwb25zZSwgdHJ5IHRvIGV4dHJhY3QgcXVpeiBkYXRhXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHJlc3BvbnNlLm1lc3NhZ2UgYXMgYW55O1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnBhcnRzICYmIG1lc3NhZ2UucGFydHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcXVpekRhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2UucGFydHNbMF0udGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgZGF0YTogcXVpekRhdGEsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIElmIG5vdCBKU09OLCB0cmVhdCBhcyB0ZXh0IHJlc3BvbnNlXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgcXVpel9xdWVzdGlvbnM6IFtcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uOiBtZXNzYWdlLnBhcnRzWzBdLnRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgYW5zd2VyczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdF9hbnN3ZXI6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWxpZCBxdWl6IGRhdGEgcmVjZWl2ZWQgZnJvbSBBMkEgYWdlbnRcIik7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiQTJBIHF1aXogZ2VuZXJhdGlvbiBmYWlsZWQ6XCIsIGVycm9yKTtcclxuICAgICAgY29uc29sZS5sb2coXCJGYWxsaW5nIGJhY2sgdG8gUkVTVCBBUEkuLi5cIik7XHJcblxyXG4gICAgICAvLyBGYWxsYmFjayB0byBSRVNUIEFQSVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmZhbGxiYWNrR2VuZXJhdGVRdWl6KGlucHV0KTtcclxuICAgICAgfSBjYXRjaCAoZmFsbGJhY2tFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJSRVNUIEFQSSBmYWxsYmFjayBhbHNvIGZhaWxlZDpcIiwgZmFsbGJhY2tFcnJvcik7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgYEJvdGggQTJBIGFuZCBSRVNUIEFQSSBmYWlsZWQuIEEyQSBlcnJvcjogJHtcclxuICAgICAgICAgICAgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIlVua25vd24gZXJyb3JcIlxyXG4gICAgICAgICAgfS4gUkVTVCBlcnJvcjogJHtcclxuICAgICAgICAgICAgZmFsbGJhY2tFcnJvciBpbnN0YW5jZW9mIEVycm9yXHJcbiAgICAgICAgICAgICAgPyBmYWxsYmFja0Vycm9yLm1lc3NhZ2VcclxuICAgICAgICAgICAgICA6IFwiVW5rbm93biBlcnJvclwiXHJcbiAgICAgICAgICB9YFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRlIHF1aXogd2l0aCB1c2FnZSB0cmFja2luZyB1c2luZyBBMkEgcHJvdG9jb2xcclxuICAgKi9cclxuICBhc3luYyBnZW5lcmF0ZVF1aXpXaXRoVXNhZ2UoaW5wdXQ6IHN0cmluZyk6IFByb21pc2U8UXVpekdlbmVyYXRpb25SZXNwb25zZT4ge1xyXG4gICAgLy8gVXNlIHRoZSBzYW1lIG1ldGhvZCBhcyBnZW5lcmF0ZVF1aXogc2luY2UgQTJBIFNESyBoYW5kbGVzIHRhc2sgdHJhY2tpbmdcclxuICAgIHJldHVybiB0aGlzLmdlbmVyYXRlUXVpeihpbnB1dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdWJtaXQgYSBjdXN0b20gdGFzayB0byB0aGUgYmFja2VuZCBhZ2VudCB1c2luZyBBMkEgU0RLXHJcbiAgICovXHJcbiAgYXN5bmMgc3VibWl0Q3VzdG9tVGFzayhza2lsbElkOiBzdHJpbmcsIGlucHV0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IEEyQSBjbGllbnRcclxuICAgICAgY29uc3QgYTJhQ2xpZW50ID0gYXdhaXQgdGhpcy5nZXRBMkFDbGllbnQoKTtcclxuXHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VQYXJhbXMgPSB0aGlzLmNyZWF0ZU1lc3NhZ2UoXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoeyBza2lsbElkLCBpbnB1dCB9KVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgcmVzcG9uc2U6IFNlbmRNZXNzYWdlUmVzcG9uc2UgPSBhd2FpdCBhMmFDbGllbnQuc2VuZE1lc3NhZ2UoXHJcbiAgICAgICAgbWVzc2FnZVBhcmFtc1xyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIHJlc3BvbnNlIC0gc2ltcGxpZmllZCBmb3IgY3VzdG9tIHRhc2tzXHJcbiAgICAgIGlmIChcInRhc2tcIiBpbiByZXNwb25zZSAmJiByZXNwb25zZS50YXNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRhc2s7XHJcbiAgICAgIH0gZWxzZSBpZiAoXCJtZXNzYWdlXCIgaW4gcmVzcG9uc2UgJiYgcmVzcG9uc2UubWVzc2FnZSkge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5tZXNzYWdlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWxpZCByZXNwb25zZSByZWNlaXZlZCBmcm9tIEEyQSBhZ2VudFwiKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJBMkEgY3VzdG9tIHRhc2sgc3VibWlzc2lvbiBmYWlsZWQ6XCIsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGYWxsYmFjayBtZXRob2QgdG8gZ2VuZXJhdGUgcXVpeiB1c2luZyBSRVNUIEFQSVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXN5bmMgZmFsbGJhY2tHZW5lcmF0ZVF1aXooXHJcbiAgICBpbnB1dDogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxRdWl6R2VuZXJhdGlvblJlc3BvbnNlPiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIlVzaW5nIFJFU1QgQVBJIGZhbGxiYWNrIGZvciBxdWl6IGdlbmVyYXRpb24uLi5cIik7XHJcblxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIGAke3RoaXMuYmFja2VuZEFnZW50VXJsfS9hcGkvYWN0aW9ucy9nZW5lcmF0ZS1xdWl6YCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlucHV0IH0pLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgZXJyb3JEYXRhLm1lc3NhZ2UgfHwgYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgY29uc29sZS5sb2coXCJSRVNUIEFQSSBxdWl6IGdlbmVyYXRpb24gc3VjY2Vzc2Z1bDpcIiwgcmVzdWx0KTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJSRVNUIEFQSSBmYWxsYmFjayBmYWlsZWQ6XCIsIGVycm9yKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBoZWFsdGggb2YgYmFja2VuZCBhZ2VudCB1c2luZyBBMkEgcHJvdG9jb2xcclxuICAgKi9cclxuICBhc3luYyBjaGVja0hlYWx0aCgpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IEEyQSBjbGllbnRcclxuICAgICAgY29uc3QgYTJhQ2xpZW50ID0gYXdhaXQgdGhpcy5nZXRBMkFDbGllbnQoKTtcclxuXHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VQYXJhbXMgPSB0aGlzLmNyZWF0ZU1lc3NhZ2UoXCJoZWFsdGggY2hlY2tcIik7XHJcblxyXG4gICAgICBjb25zdCByZXNwb25zZTogU2VuZE1lc3NhZ2VSZXNwb25zZSA9IGF3YWl0IGEyYUNsaWVudC5zZW5kTWVzc2FnZShcclxuICAgICAgICBtZXNzYWdlUGFyYW1zXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1czogXCJoZWFsdGh5XCIsXHJcbiAgICAgICAgcmVzcG9uc2U6IHJlc3BvbnNlLFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkEyQSBoZWFsdGggY2hlY2sgZmFpbGVkOlwiLCBlcnJvcik7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzOiBcInVuaGVhbHRoeVwiLFxyXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFwiVW5rbm93biBlcnJvclwiLFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGJhY2tlbmQgYWdlbnQgaW5mb3JtYXRpb24gdXNpbmcgQTJBIHByb3RvY29sXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QmFja2VuZEFnZW50SW5mbygpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gR2V0IEEyQSBjbGllbnRcclxuICAgICAgY29uc3QgYTJhQ2xpZW50ID0gYXdhaXQgdGhpcy5nZXRBMkFDbGllbnQoKTtcclxuXHJcbiAgICAgIGNvbnN0IG1lc3NhZ2VQYXJhbXMgPSB0aGlzLmNyZWF0ZU1lc3NhZ2UoXCJnZXQgYWdlbnQgaW5mb1wiKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBTZW5kTWVzc2FnZVJlc3BvbnNlID0gYXdhaXQgYTJhQ2xpZW50LnNlbmRNZXNzYWdlKFxyXG4gICAgICAgIG1lc3NhZ2VQYXJhbXNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYWdlbnRVcmw6IHRoaXMuYmFja2VuZEFnZW50VXJsLFxyXG4gICAgICAgIHJlc3BvbnNlOiByZXNwb25zZSxcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJBMkEgYWdlbnQgaW5mbyByZXF1ZXN0IGZhaWxlZDpcIiwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBiYWNrZW5kIGFnZW50IHNraWxscyB1c2luZyBBMkEgcHJvdG9jb2xcclxuICAgKi9cclxuICBhc3luYyBnZXRCYWNrZW5kU2tpbGxzKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBHZXQgQTJBIGNsaWVudFxyXG4gICAgICBjb25zdCBhMmFDbGllbnQgPSBhd2FpdCB0aGlzLmdldEEyQUNsaWVudCgpO1xyXG5cclxuICAgICAgY29uc3QgbWVzc2FnZVBhcmFtcyA9IHRoaXMuY3JlYXRlTWVzc2FnZShcImdldCBza2lsbHNcIik7XHJcblxyXG4gICAgICBjb25zdCByZXNwb25zZTogU2VuZE1lc3NhZ2VSZXNwb25zZSA9IGF3YWl0IGEyYUNsaWVudC5zZW5kTWVzc2FnZShcclxuICAgICAgICBtZXNzYWdlUGFyYW1zXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNraWxsczogcmVzcG9uc2UsXHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGdldCBiYWNrZW5kIHNraWxsczpcIiwgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcclxuZXhwb3J0IGNvbnN0IHJlYWxRdWl6QTJBQ2xpZW50ID0gbmV3IFJlYWxRdWl6QTJBQ2xpZW50KCk7XHJcbiJdLCJuYW1lcyI6WyJBMkFDbGllbnQiLCJSZWFsUXVpekEyQUNsaWVudCIsImdldEEyQUNsaWVudCIsImEyYUNsaWVudCIsImZyb21DYXJkVXJsIiwiYmFja2VuZEFnZW50VXJsIiwiY3JlYXRlTWVzc2FnZSIsInRleHQiLCJtZXNzYWdlIiwia2luZCIsIm1lc3NhZ2VJZCIsIk1hdGgiLCJEYXRlIiwibm93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJyb2xlIiwicGFydHMiLCJjb25maWd1cmF0aW9uIiwiYmxvY2tpbmciLCJnZW5lcmF0ZVF1aXoiLCJpbnB1dCIsImNvbnNvbGUiLCJsb2ciLCJtZXNzYWdlUGFyYW1zIiwicmVzcG9uc2UiLCJzZW5kTWVzc2FnZSIsInRhc2siLCJjb21wbGV0ZWRUYXNrIiwiaWQiLCJhdHRlbXB0cyIsIm1heEF0dGVtcHRzIiwic3RhdHVzIiwic3RhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJ0YXNrUmVzcG9uc2UiLCJnZXRUYXNrIiwicG9sbEVycm9yIiwiZXJyb3IiLCJFcnJvciIsImFydGlmYWN0cyIsInF1aXpBcnRpZmFjdCIsImZpbmQiLCJhcnRpZmFjdCIsIm5hbWUiLCJxdWl6RGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJwYXJzZUVycm9yIiwibGVuZ3RoIiwiZSIsInF1aXpfcXVlc3Rpb25zIiwicXVlc3Rpb24iLCJhbnN3ZXJzIiwiY29ycmVjdF9hbnN3ZXIiLCJmYWxsYmFja0dlbmVyYXRlUXVpeiIsImZhbGxiYWNrRXJyb3IiLCJnZW5lcmF0ZVF1aXpXaXRoVXNhZ2UiLCJzdWJtaXRDdXN0b21UYXNrIiwic2tpbGxJZCIsInN0cmluZ2lmeSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJvayIsImVycm9yRGF0YSIsImpzb24iLCJjYXRjaCIsInJlc3VsdCIsImNoZWNrSGVhbHRoIiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJnZXRCYWNrZW5kQWdlbnRJbmZvIiwiYWdlbnRVcmwiLCJnZXRCYWNrZW5kU2tpbGxzIiwic2tpbGxzIiwiY29uc3RydWN0b3IiLCJyZWFsUXVpekEyQUNsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/a2a-client-real.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/api-client.ts":
/*!*******************************!*\
  !*** ./src/lib/api-client.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QuizApiClient: function() { return /* binding */ QuizApiClient; },\n/* harmony export */   quizApiClient: function() { return /* binding */ quizApiClient; }\n/* harmony export */ });\n/* harmony import */ var _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a2a-client-real */ \"(app-pages-browser)/./src/lib/a2a-client-real.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:4001\";\nclass QuizApiClient {\n    async generateQuiz(input) {\n        if (this.useA2A) {\n            try {\n                // Use A2A protocol to communicate with backend agent\n                return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.generateQuiz(input);\n            } catch (a2aError) {\n                console.error(\"A2A quiz generation failed, trying REST API fallback:\", a2aError);\n                // Fallback to REST API\n                try {\n                    const response = await fetch(\"\".concat(this.baseUrl, \"/api/actions/generate-quiz\"), {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            input\n                        })\n                    });\n                    if (!response.ok) {\n                        const errorData = await response.json().catch(()=>({}));\n                        throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n                    }\n                    const result = await response.json();\n                    console.log(\"REST API fallback successful:\", result);\n                    return result;\n                } catch (restError) {\n                    console.error(\"REST API fallback also failed:\", restError);\n                    // Final fallback - return a mock quiz\n                    console.log(\"Using mock quiz as final fallback\");\n                    return this.generateMockQuiz(input);\n                }\n            }\n        } else {\n            // Direct REST API call\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/actions/generate-quiz\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    input\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n            }\n            return response.json();\n        }\n    }\n    async generateQuizWithUsage(input) {\n        if (this.useA2A) {\n            // Use A2A protocol with usage tracking\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.generateQuizWithUsage(input);\n        } else {\n            // Fallback to REST API\n            const response = await fetch(\"\".concat(this.baseUrl, \"/api/actions/openai\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    input\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>({}));\n                throw new Error(errorData.message || \"HTTP error! status: \".concat(response.status));\n            }\n            return response.json();\n        }\n    }\n    async checkHealth() {\n        if (this.useA2A) {\n            // Use A2A protocol to check backend agent health\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.checkHealth();\n        } else {\n            // Fallback to REST API\n            const response = await fetch(\"\".concat(this.baseUrl, \"/health\"));\n            if (!response.ok) {\n                throw new Error(\"Health check failed! status: \".concat(response.status));\n            }\n            return response.json();\n        }\n    }\n    /**\r\n   * Get backend agent information via A2A protocol\r\n   */ async getBackendAgentInfo() {\n        if (this.useA2A) {\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.getBackendAgentInfo();\n        } else {\n            throw new Error(\"Agent info only available via A2A protocol\");\n        }\n    }\n    /**\r\n   * Get available skills from backend agent\r\n   */ async getBackendSkills() {\n        if (this.useA2A) {\n            return await _a2a_client_real__WEBPACK_IMPORTED_MODULE_0__.realQuizA2AClient.getBackendSkills();\n        } else {\n            throw new Error(\"Skills info only available via A2A protocol\");\n        }\n    }\n    /**\r\n   * Switch between A2A and REST modes\r\n   */ setUseA2A(useA2A) {\n        this.useA2A = useA2A;\n    }\n    /**\r\n   * Switch between real A2A and simulated A2A modes\r\n   */ setUseRealA2A(useRealA2A) {\n        this.useRealA2A = useRealA2A;\n    }\n    /**\r\n   * Generate a mock quiz as final fallback\r\n   */ generateMockQuiz(input) {\n        return {\n            data: {\n                quiz_questions: [\n                    {\n                        question: \"What is the main topic of: \".concat(input, \"?\"),\n                        correct_answer: \"A\",\n                        answers: [\n                            {\n                                answer: \"The topic mentioned in the question\"\n                            },\n                            {\n                                answer: \"Something completely different\"\n                            },\n                            {\n                                answer: \"A random topic\"\n                            },\n                            {\n                                answer: \"None of the above\"\n                            }\n                        ],\n                        difficulty: \"medium\"\n                    },\n                    {\n                        question: \"Which of the following is most relevant to: \".concat(input, \"?\"),\n                        correct_answer: \"B\",\n                        answers: [\n                            {\n                                answer: \"Option A\"\n                            },\n                            {\n                                answer: \"The most relevant option\"\n                            },\n                            {\n                                answer: \"Option C\"\n                            },\n                            {\n                                answer: \"Option D\"\n                            }\n                        ],\n                        difficulty: \"medium\"\n                    },\n                    {\n                        question: \"True or False: \".concat(input, \" is an important topic.\"),\n                        correct_answer: \"A\",\n                        answers: [\n                            {\n                                answer: \"True\"\n                            },\n                            {\n                                answer: \"False\"\n                            }\n                        ],\n                        difficulty: \"easy\"\n                    }\n                ]\n            }\n        };\n    }\n    constructor(baseUrl = API_BASE_URL, useA2A = true, useRealA2A = true){\n        this.baseUrl = baseUrl;\n        this.useA2A = useA2A;\n        this.useRealA2A = useRealA2A;\n    }\n}\nconst quizApiClient = new QuizApiClient();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api-client.ts\n"));

/***/ })

});